// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/contract.go
//
// Generated by this command:
//
//	mockgen -source=internal/client/contract.go -destination=internal/mocks/mock_contract_client.go -package=mocks ContractClientInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	client "github.com/Layr-Labs/hourglass-monorepo/hgctl-go/internal/client"
	gomock "go.uber.org/mock/gomock"
)

// MockContractClientInterface is a mock of ContractClientInterface interface.
type MockContractClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContractClientInterfaceMockRecorder
	isgomock struct{}
}

// MockContractClientInterfaceMockRecorder is the mock recorder for MockContractClientInterface.
type MockContractClientInterfaceMockRecorder struct {
	mock *MockContractClientInterface
}

// NewMockContractClientInterface creates a new mock instance.
func NewMockContractClientInterface(ctrl *gomock.Controller) *MockContractClientInterface {
	mock := &MockContractClientInterface{ctrl: ctrl}
	mock.recorder = &MockContractClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractClientInterface) EXPECT() *MockContractClientInterfaceMockRecorder {
	return m.recorder
}

// ProcessClaim mocks base method.
func (m *MockContractClientInterface) ProcessClaim(ctx context.Context, rewardsCoordinatorAddress string, proof *client.ClaimProof) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessClaim", ctx, rewardsCoordinatorAddress, proof)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessClaim indicates an expected call of ProcessClaim.
func (mr *MockContractClientInterfaceMockRecorder) ProcessClaim(ctx, rewardsCoordinatorAddress, proof any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessClaim", reflect.TypeOf((*MockContractClientInterface)(nil).ProcessClaim), ctx, rewardsCoordinatorAddress, proof)
}

// SetClaimerFor mocks base method.
func (m *MockContractClientInterface) SetClaimerFor(ctx context.Context, rewardsCoordinatorAddress, earnerAddress, claimerAddress string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClaimerFor", ctx, rewardsCoordinatorAddress, earnerAddress, claimerAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetClaimerFor indicates an expected call of SetClaimerFor.
func (mr *MockContractClientInterfaceMockRecorder) SetClaimerFor(ctx, rewardsCoordinatorAddress, earnerAddress, claimerAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClaimerFor", reflect.TypeOf((*MockContractClientInterface)(nil).SetClaimerFor), ctx, rewardsCoordinatorAddress, earnerAddress, claimerAddress)
}
