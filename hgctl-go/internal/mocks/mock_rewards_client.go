// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/rewards.go
//
// Generated by this command:
//
//	mockgen -source=internal/client/rewards.go -destination=internal/mocks/mock_rewards_client.go -package=mocks RewardsClientInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	client "github.com/Layr-Labs/hourglass-monorepo/hgctl-go/internal/client"
	gomock "go.uber.org/mock/gomock"
)

// MockRewardsClientInterface is a mock of RewardsClientInterface interface.
type MockRewardsClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRewardsClientInterfaceMockRecorder
	isgomock struct{}
}

// MockRewardsClientInterfaceMockRecorder is the mock recorder for MockRewardsClientInterface.
type MockRewardsClientInterfaceMockRecorder struct {
	mock *MockRewardsClientInterface
}

// NewMockRewardsClientInterface creates a new mock instance.
func NewMockRewardsClientInterface(ctrl *gomock.Controller) *MockRewardsClientInterface {
	mock := &MockRewardsClientInterface{ctrl: ctrl}
	mock.recorder = &MockRewardsClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardsClientInterface) EXPECT() *MockRewardsClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRewardsClientInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRewardsClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRewardsClientInterface)(nil).Close))
}

// GetClaimProof mocks base method.
func (m *MockRewardsClientInterface) GetClaimProof(ctx context.Context, earnerAddress string) (*client.ClaimProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimProof", ctx, earnerAddress)
	ret0, _ := ret[0].(*client.ClaimProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimProof indicates an expected call of GetClaimProof.
func (mr *MockRewardsClientInterfaceMockRecorder) GetClaimProof(ctx, earnerAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimProof", reflect.TypeOf((*MockRewardsClientInterface)(nil).GetClaimProof), ctx, earnerAddress)
}

// GetSummarizedRewards mocks base method.
func (m *MockRewardsClientInterface) GetSummarizedRewards(ctx context.Context, earnerAddress string) (*client.RewardsSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummarizedRewards", ctx, earnerAddress)
	ret0, _ := ret[0].(*client.RewardsSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummarizedRewards indicates an expected call of GetSummarizedRewards.
func (mr *MockRewardsClientInterfaceMockRecorder) GetSummarizedRewards(ctx, earnerAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummarizedRewards", reflect.TypeOf((*MockRewardsClientInterface)(nil).GetSummarizedRewards), ctx, earnerAddress)
}
