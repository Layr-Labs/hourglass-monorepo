// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/proxy.proto

package proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProxyService_ProxyRequest_FullMethodName  = "/obsidian.proxy.v1.ProxyService/ProxyRequest"
	ProxyService_AddBackend_FullMethodName    = "/obsidian.proxy.v1.ProxyService/AddBackend"
	ProxyService_UpdateBackend_FullMethodName = "/obsidian.proxy.v1.ProxyService/UpdateBackend"
	ProxyService_RemoveBackend_FullMethodName = "/obsidian.proxy.v1.ProxyService/RemoveBackend"
	ProxyService_ListBackends_FullMethodName  = "/obsidian.proxy.v1.ProxyService/ListBackends"
	ProxyService_GetMetrics_FullMethodName    = "/obsidian.proxy.v1.ProxyService/GetMetrics"
)

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyServiceClient interface {
	// Proxy requests
	ProxyRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Backend management
	AddBackend(ctx context.Context, in *BackendConfig, opts ...grpc.CallOption) (*Backend, error)
	UpdateBackend(ctx context.Context, in *BackendConfig, opts ...grpc.CallOption) (*Backend, error)
	RemoveBackend(ctx context.Context, in *BackendID, opts ...grpc.CallOption) (*Backend, error)
	ListBackends(ctx context.Context, in *ListBackendsRequest, opts ...grpc.CallOption) (*BackendList, error)
	// Monitoring
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*ProxyMetrics, error)
}

type proxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceClient(cc grpc.ClientConnInterface) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) ProxyRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ProxyService_ProxyRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) AddBackend(ctx context.Context, in *BackendConfig, opts ...grpc.CallOption) (*Backend, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Backend)
	err := c.cc.Invoke(ctx, ProxyService_AddBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) UpdateBackend(ctx context.Context, in *BackendConfig, opts ...grpc.CallOption) (*Backend, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Backend)
	err := c.cc.Invoke(ctx, ProxyService_UpdateBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) RemoveBackend(ctx context.Context, in *BackendID, opts ...grpc.CallOption) (*Backend, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Backend)
	err := c.cc.Invoke(ctx, ProxyService_RemoveBackend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) ListBackends(ctx context.Context, in *ListBackendsRequest, opts ...grpc.CallOption) (*BackendList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackendList)
	err := c.cc.Invoke(ctx, ProxyService_ListBackends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*ProxyMetrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyMetrics)
	err := c.cc.Invoke(ctx, ProxyService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServiceServer is the server API for ProxyService service.
// All implementations must embed UnimplementedProxyServiceServer
// for forward compatibility.
type ProxyServiceServer interface {
	// Proxy requests
	ProxyRequest(context.Context, *Request) (*Response, error)
	// Backend management
	AddBackend(context.Context, *BackendConfig) (*Backend, error)
	UpdateBackend(context.Context, *BackendConfig) (*Backend, error)
	RemoveBackend(context.Context, *BackendID) (*Backend, error)
	ListBackends(context.Context, *ListBackendsRequest) (*BackendList, error)
	// Monitoring
	GetMetrics(context.Context, *GetMetricsRequest) (*ProxyMetrics, error)
	mustEmbedUnimplementedProxyServiceServer()
}

// UnimplementedProxyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProxyServiceServer struct{}

func (UnimplementedProxyServiceServer) ProxyRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyRequest not implemented")
}
func (UnimplementedProxyServiceServer) AddBackend(context.Context, *BackendConfig) (*Backend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBackend not implemented")
}
func (UnimplementedProxyServiceServer) UpdateBackend(context.Context, *BackendConfig) (*Backend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackend not implemented")
}
func (UnimplementedProxyServiceServer) RemoveBackend(context.Context, *BackendID) (*Backend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBackend not implemented")
}
func (UnimplementedProxyServiceServer) ListBackends(context.Context, *ListBackendsRequest) (*BackendList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackends not implemented")
}
func (UnimplementedProxyServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*ProxyMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedProxyServiceServer) mustEmbedUnimplementedProxyServiceServer() {}
func (UnimplementedProxyServiceServer) testEmbeddedByValue()                      {}

// UnsafeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceServer will
// result in compilation errors.
type UnsafeProxyServiceServer interface {
	mustEmbedUnimplementedProxyServiceServer()
}

func RegisterProxyServiceServer(s grpc.ServiceRegistrar, srv ProxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedProxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProxyService_ServiceDesc, srv)
}

func _ProxyService_ProxyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).ProxyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_ProxyRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).ProxyRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_AddBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).AddBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_AddBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).AddBackend(ctx, req.(*BackendConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_UpdateBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).UpdateBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_UpdateBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).UpdateBackend(ctx, req.(*BackendConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_RemoveBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).RemoveBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_RemoveBackend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).RemoveBackend(ctx, req.(*BackendID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_ListBackends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).ListBackends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_ListBackends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).ListBackends(ctx, req.(*ListBackendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyService_ServiceDesc is the grpc.ServiceDesc for ProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "obsidian.proxy.v1.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyRequest",
			Handler:    _ProxyService_ProxyRequest_Handler,
		},
		{
			MethodName: "AddBackend",
			Handler:    _ProxyService_AddBackend_Handler,
		},
		{
			MethodName: "UpdateBackend",
			Handler:    _ProxyService_UpdateBackend_Handler,
		},
		{
			MethodName: "RemoveBackend",
			Handler:    _ProxyService_RemoveBackend_Handler,
		},
		{
			MethodName: "ListBackends",
			Handler:    _ProxyService_ListBackends_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _ProxyService_GetMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/proxy.proto",
}
