// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/registry.proto

package registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegistryService_PullImage_FullMethodName                 = "/obsidian.registry.v1.RegistryService/PullImage"
	RegistryService_GetImage_FullMethodName                  = "/obsidian.registry.v1.RegistryService/GetImage"
	RegistryService_ListImages_FullMethodName                = "/obsidian.registry.v1.RegistryService/ListImages"
	RegistryService_DeleteImage_FullMethodName               = "/obsidian.registry.v1.RegistryService/DeleteImage"
	RegistryService_AddRegistry_FullMethodName               = "/obsidian.registry.v1.RegistryService/AddRegistry"
	RegistryService_UpdateRegistryCredentials_FullMethodName = "/obsidian.registry.v1.RegistryService/UpdateRegistryCredentials"
	RegistryService_ScanImage_FullMethodName                 = "/obsidian.registry.v1.RegistryService/ScanImage"
	RegistryService_GetImagePolicy_FullMethodName            = "/obsidian.registry.v1.RegistryService/GetImagePolicy"
)

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryServiceClient interface {
	// Image operations
	PullImage(ctx context.Context, in *ImageReference, opts ...grpc.CallOption) (*Image, error)
	GetImage(ctx context.Context, in *ImageID, opts ...grpc.CallOption) (*Image, error)
	ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ImageList, error)
	DeleteImage(ctx context.Context, in *ImageID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Registry management
	AddRegistry(ctx context.Context, in *RegistryConfig, opts ...grpc.CallOption) (*Registry, error)
	UpdateRegistryCredentials(ctx context.Context, in *RegistryCredentials, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Security
	ScanImage(ctx context.Context, in *ImageID, opts ...grpc.CallOption) (*ScanResult, error)
	GetImagePolicy(ctx context.Context, in *ImageID, opts ...grpc.CallOption) (*Policy, error)
}

type registryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryServiceClient(cc grpc.ClientConnInterface) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) PullImage(ctx context.Context, in *ImageReference, opts ...grpc.CallOption) (*Image, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Image)
	err := c.cc.Invoke(ctx, RegistryService_PullImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetImage(ctx context.Context, in *ImageID, opts ...grpc.CallOption) (*Image, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Image)
	err := c.cc.Invoke(ctx, RegistryService_GetImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ImageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageList)
	err := c.cc.Invoke(ctx, RegistryService_ListImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) DeleteImage(ctx context.Context, in *ImageID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RegistryService_DeleteImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) AddRegistry(ctx context.Context, in *RegistryConfig, opts ...grpc.CallOption) (*Registry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Registry)
	err := c.cc.Invoke(ctx, RegistryService_AddRegistry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) UpdateRegistryCredentials(ctx context.Context, in *RegistryCredentials, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RegistryService_UpdateRegistryCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ScanImage(ctx context.Context, in *ImageID, opts ...grpc.CallOption) (*ScanResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanResult)
	err := c.cc.Invoke(ctx, RegistryService_ScanImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetImagePolicy(ctx context.Context, in *ImageID, opts ...grpc.CallOption) (*Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Policy)
	err := c.cc.Invoke(ctx, RegistryService_GetImagePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceServer is the server API for RegistryService service.
// All implementations must embed UnimplementedRegistryServiceServer
// for forward compatibility.
type RegistryServiceServer interface {
	// Image operations
	PullImage(context.Context, *ImageReference) (*Image, error)
	GetImage(context.Context, *ImageID) (*Image, error)
	ListImages(context.Context, *ListImagesRequest) (*ImageList, error)
	DeleteImage(context.Context, *ImageID) (*emptypb.Empty, error)
	// Registry management
	AddRegistry(context.Context, *RegistryConfig) (*Registry, error)
	UpdateRegistryCredentials(context.Context, *RegistryCredentials) (*emptypb.Empty, error)
	// Security
	ScanImage(context.Context, *ImageID) (*ScanResult, error)
	GetImagePolicy(context.Context, *ImageID) (*Policy, error)
	mustEmbedUnimplementedRegistryServiceServer()
}

// UnimplementedRegistryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegistryServiceServer struct{}

func (UnimplementedRegistryServiceServer) PullImage(context.Context, *ImageReference) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullImage not implemented")
}
func (UnimplementedRegistryServiceServer) GetImage(context.Context, *ImageID) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedRegistryServiceServer) ListImages(context.Context, *ListImagesRequest) (*ImageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (UnimplementedRegistryServiceServer) DeleteImage(context.Context, *ImageID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedRegistryServiceServer) AddRegistry(context.Context, *RegistryConfig) (*Registry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRegistry not implemented")
}
func (UnimplementedRegistryServiceServer) UpdateRegistryCredentials(context.Context, *RegistryCredentials) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistryCredentials not implemented")
}
func (UnimplementedRegistryServiceServer) ScanImage(context.Context, *ImageID) (*ScanResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanImage not implemented")
}
func (UnimplementedRegistryServiceServer) GetImagePolicy(context.Context, *ImageID) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImagePolicy not implemented")
}
func (UnimplementedRegistryServiceServer) mustEmbedUnimplementedRegistryServiceServer() {}
func (UnimplementedRegistryServiceServer) testEmbeddedByValue()                         {}

// UnsafeRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServiceServer will
// result in compilation errors.
type UnsafeRegistryServiceServer interface {
	mustEmbedUnimplementedRegistryServiceServer()
}

func RegisterRegistryServiceServer(s grpc.ServiceRegistrar, srv RegistryServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegistryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegistryService_ServiceDesc, srv)
}

func _RegistryService_PullImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).PullImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_PullImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).PullImage(ctx, req.(*ImageReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetImage(ctx, req.(*ImageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_ListImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListImages(ctx, req.(*ListImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_DeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).DeleteImage(ctx, req.(*ImageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_AddRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).AddRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_AddRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).AddRegistry(ctx, req.(*RegistryConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_UpdateRegistryCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UpdateRegistryCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_UpdateRegistryCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UpdateRegistryCredentials(ctx, req.(*RegistryCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ScanImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ScanImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_ScanImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ScanImage(ctx, req.(*ImageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetImagePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetImagePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_GetImagePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetImagePolicy(ctx, req.(*ImageID))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryService_ServiceDesc is the grpc.ServiceDesc for RegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "obsidian.registry.v1.RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullImage",
			Handler:    _RegistryService_PullImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _RegistryService_GetImage_Handler,
		},
		{
			MethodName: "ListImages",
			Handler:    _RegistryService_ListImages_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _RegistryService_DeleteImage_Handler,
		},
		{
			MethodName: "AddRegistry",
			Handler:    _RegistryService_AddRegistry_Handler,
		},
		{
			MethodName: "UpdateRegistryCredentials",
			Handler:    _RegistryService_UpdateRegistryCredentials_Handler,
		},
		{
			MethodName: "ScanImage",
			Handler:    _RegistryService_ScanImage_Handler,
		},
		{
			MethodName: "GetImagePolicy",
			Handler:    _RegistryService_GetImagePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/registry.proto",
}
