syntax = "proto3";

package obsidian.proxy.v1;

option go_package = "github.com/hourglass/obsidian/api/proto/proxy";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

service ProxyService {
  // Proxy requests
  rpc ProxyRequest(Request) returns (Response);
  
  // Backend management
  rpc AddBackend(BackendConfig) returns (Backend);
  rpc UpdateBackend(BackendConfig) returns (Backend);
  rpc RemoveBackend(BackendID) returns (Backend);
  rpc ListBackends(ListBackendsRequest) returns (BackendList);
  
  // Monitoring
  rpc GetMetrics(GetMetricsRequest) returns (ProxyMetrics);
}

message Request {
  string backend_name = 1;
  string method = 2;
  string path = 3;
  map<string, string> headers = 4;
  bytes body = 5;
  string container_id = 6;
}

message Response {
  int32 status_code = 1;
  map<string, string> headers = 2;
  bytes body = 3;
  google.protobuf.Duration latency = 4;
}

message BackendConfig {
  string name = 1;
  string url = 2;
  RateLimits rate_limits = 3;
  repeated string allowed_methods = 4;
  repeated Filter filters = 5;
  google.protobuf.Duration timeout = 6;
  CircuitBreakerConfig circuit_breaker = 7;
}

message Backend {
  string name = 1;
  string url = 2;
  bool enabled = 3;
  BackendStatus status = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

message BackendID {
  string name = 1;
}

message ListBackendsRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message BackendList {
  repeated Backend backends = 1;
  string next_page_token = 2;
}

message RateLimits {
  int32 requests_per_second = 1;
  int32 burst = 2;
  int32 max_concurrent_requests = 3;
}

message Filter {
  FilterType type = 1;
  string parameter = 2;
  string value = 3;
}

message CircuitBreakerConfig {
  int32 failure_threshold = 1;
  google.protobuf.Duration timeout = 2;
  int32 success_threshold = 3;
}

message GetMetricsRequest {
  string backend_name = 1;
  google.protobuf.Duration window = 2;
}

message ProxyMetrics {
  int64 total_requests = 1;
  int64 successful_requests = 2;
  int64 failed_requests = 3;
  int64 rate_limited_requests = 4;
  double average_latency_ms = 5;
  double p95_latency_ms = 6;
  double p99_latency_ms = 7;
  map<string, int64> requests_by_method = 8;
  map<int32, int64> requests_by_status = 9;
}

enum FilterType {
  FILTER_TYPE_UNSPECIFIED = 0;
  FILTER_TYPE_GAS_LIMIT = 1;
  FILTER_TYPE_CONTENT_SIZE = 2;
  FILTER_TYPE_HEADER = 3;
  FILTER_TYPE_PATH = 4;
}

enum BackendStatus {
  BACKEND_STATUS_UNSPECIFIED = 0;
  BACKEND_STATUS_HEALTHY = 1;
  BACKEND_STATUS_UNHEALTHY = 2;
  BACKEND_STATUS_CIRCUIT_OPEN = 3;
}