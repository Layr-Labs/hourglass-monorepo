syntax = "proto3";

package obsidian.orchestrator.v1;

option go_package = "github.com/hourglass/obsidian/api/proto/orchestrator";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

service OrchestratorService {
  // Container management
  rpc CreateContainer(CreateContainerRequest) returns (Container);
  rpc StartContainer(ContainerID) returns (Container);
  rpc StopContainer(ContainerID) returns (Container);
  rpc RemoveContainer(ContainerID) returns (google.protobuf.Empty);
  
  // Task execution
  rpc SubmitTask(TaskRequest) returns (TaskResponse);
  rpc GetTaskStatus(TaskID) returns (TaskStatus);
  rpc CancelTask(TaskID) returns (google.protobuf.Empty);
  
  // Health & monitoring
  rpc GetHealth(google.protobuf.Empty) returns (HealthStatus);
  rpc GetMetrics(google.protobuf.Empty) returns (Metrics);
}

message CreateContainerRequest {
  string image_id = 1;
  Resources resources = 2;
  map<string, string> environment = 3;
  string network = 4;
  repeated string command = 5;
  repeated string args = 6;
}

message Container {
  string id = 1;
  string image_id = 2;
  ContainerState state = 3;
  Resources resources = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp started_at = 6;
  map<string, string> labels = 7;
}

message ContainerID {
  string id = 1;
}

message TaskRequest {
  string container_id = 1;
  bytes payload = 2;
  google.protobuf.Duration timeout = 3;
  map<string, string> metadata = 4;
}

message TaskResponse {
  string task_id = 1;
  bytes result = 2;
  TaskMetrics metrics = 3;
  google.protobuf.Timestamp completed_at = 4;
}

message TaskID {
  string id = 1;
}

message TaskStatus {
  string task_id = 1;
  TaskState state = 2;
  string error_message = 3;
  TaskMetrics metrics = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp started_at = 6;
  google.protobuf.Timestamp completed_at = 7;
}

message Resources {
  string cpu_limit = 1;     // e.g., "4" cores
  string memory_limit = 2;  // e.g., "8Gi"
  string disk_limit = 3;    // e.g., "50Gi"
}

message TaskMetrics {
  double cpu_usage = 1;
  int64 memory_usage_bytes = 2;
  int64 disk_usage_bytes = 3;
  google.protobuf.Duration execution_time = 4;
}

message HealthStatus {
  bool healthy = 1;
  string message = 2;
  google.protobuf.Timestamp last_check = 3;
}

message Metrics {
  int32 running_containers = 1;
  int32 total_containers = 2;
  int32 queue_depth = 3;
  double cpu_utilization = 4;
  double memory_utilization = 5;
}

enum ContainerState {
  CONTAINER_STATE_UNSPECIFIED = 0;
  CONTAINER_STATE_CREATED = 1;
  CONTAINER_STATE_RUNNING = 2;
  CONTAINER_STATE_STOPPED = 3;
  CONTAINER_STATE_FAILED = 4;
}

enum TaskState {
  TASK_STATE_UNSPECIFIED = 0;
  TASK_STATE_QUEUED = 1;
  TASK_STATE_RUNNING = 2;
  TASK_STATE_SUCCESS = 3;
  TASK_STATE_FAILED = 4;
  TASK_STATE_TIMEOUT = 5;
  TASK_STATE_CANCELLED = 6;
}