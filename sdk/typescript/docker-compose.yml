# Docker Compose for Hourglass TypeScript Performer development
version: '3.8'

services:
  # Development performer
  performer-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - DEBUG=true
      - LOG_LEVEL=debug
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    command: npm run dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Production performer
  performer-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - DEBUG=false
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    profiles:
      - production

  # Monitoring stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    profiles:
      - monitoring
    
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    profiles:
      - monitoring

volumes:
  grafana-storage:

networks:
  default:
    name: hourglass-network