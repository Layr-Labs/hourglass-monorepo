name: build hgctl

on:
  push:
    branches:
      - "**"
    tags:
      - 'hgctl-v*'

permissions:
  contents: read

jobs:
  gofmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Check formatting
        run: |
          cd hgctl-go
          if [ -n "$(gofmt -l .)" ]; then
            echo "The following files are not formatted properly:"
            gofmt -d .
            exit 1
          fi
          echo "All files are formatted correctly."

  hgctl-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Run linter
        run: |
          cd hgctl-go
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          export PATH=$PATH:$(go env GOPATH)/bin
          golangci-lint run ./...

  hgctl-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Run tests
        run: |
          cd hgctl-go
          go mod tidy
          make test

  hgctl-test-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
      
      - name: Run integration tests
        run: |
          cd hgctl-go
          # Generate test chain state with AVS setup
          make generate-test-state
          # Run integration tests
          make test-integration

  build-binaries:
    runs-on: ubuntu-latest
    needs: [gofmt, hgctl-lint, hgctl-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Build binaries for all platforms
        env:
          HGCTL_POSTHOG_API_KEY: ${{ secrets.HGCTL_POSTHOG_API_KEY }}
        run: |
          cd hgctl-go

          # Get version
          VERSION=$(cat VERSION | tr -d '[:space:]')
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#hgctl-}" # Remove hgctl- prefix from tag
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Build for all platforms
          mkdir -p ./release

          # Set ldflags with API key injection
          COMMIT_HASH=$(git rev-parse --short HEAD)
          LDFLAGS="-X 'github.com/Layr-Labs/hourglass-monorepo/hgctl-go/internal/version.Version=$VERSION' -X 'github.com/Layr-Labs/hourglass-monorepo/hgctl-go/internal/version.Commit=$COMMIT_HASH'"

          # Add PostHog API key if available
          if [ -n "${HGCTL_POSTHOG_API_KEY}" ]; then
            LDFLAGS="$LDFLAGS -X 'github.com/Layr-Labs/hourglass-monorepo/hgctl-go/internal/telemetry.embeddedTelemetryApiKey=${HGCTL_POSTHOG_API_KEY}'"
          fi

          # Linux AMD64
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
            -ldflags "$LDFLAGS" \
            -o ./release/hgctl-linux-amd64 \
            ./cmd/hgctl

          # Linux ARM64
          CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build \
            -ldflags "$LDFLAGS" \
            -o ./release/hgctl-linux-arm64 \
            ./cmd/hgctl

          # Darwin AMD64
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build \
            -ldflags "$LDFLAGS" \
            -o ./release/hgctl-darwin-amd64 \
            ./cmd/hgctl

          # Darwin ARM64
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build \
            -ldflags "$LDFLAGS" \
            -o ./release/hgctl-darwin-arm64 \
            ./cmd/hgctl
          
          # Create tar.gz archives
          cd release
          for binary in hgctl-*; do
            tar czf "${binary}-${VERSION}.tar.gz" "$binary"
            rm "$binary"
          done
          
          # List created archives
          ls -la *.tar.gz
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hgctl-binaries
          path: hgctl-go/release/*.tar.gz
          retention-days: 7

  release:
    runs-on: ubuntu-latest
    needs: [build-binaries]
    if: startsWith(github.ref, 'refs/tags/hgctl-v')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hgctl-binaries
          path: ./release
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            ## hgctl Release
            
            ### Installation
            
            #### macOS (Apple Silicon)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hgctl-darwin-arm64-${{ github.ref_name }}.tar.gz | tar xz
            sudo mv hgctl-darwin-arm64 /usr/local/bin/hgctl
            ```
            
            #### macOS (Intel)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hgctl-darwin-amd64-${{ github.ref_name }}.tar.gz | tar xz
            sudo mv hgctl-darwin-amd64 /usr/local/bin/hgctl
            ```
            
            #### Linux (x86_64)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hgctl-linux-amd64-${{ github.ref_name }}.tar.gz | tar xz
            sudo mv hgctl-linux-amd64 /usr/local/bin/hgctl
            ```
            
            #### Linux (ARM64)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hgctl-linux-arm64-${{ github.ref_name }}.tar.gz | tar xz
            sudo mv hgctl-linux-arm64 /usr/local/bin/hgctl
            ```
      
      - name: Upload Release Assets
        run: |
          upload_url="${{ steps.create_release.outputs.upload_url }}"
          upload_url="${upload_url/\{?name,label\}/}"
          
          for asset in ./release/*.tar.gz; do
            asset_name=$(basename "$asset")
            echo "Uploading $asset_name..."
            curl --fail \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/gzip" \
              --data-binary @"$asset" \
              "${upload_url}?name=${asset_name}"
          done