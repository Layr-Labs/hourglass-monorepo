name: build hgctl

on:
  push:
    branches:
      - main
      - master
      - develop
    tags:
      - 'hgctl-v*'
  pull_request:
    branches:
      - main
      - master
      - develop

permissions:
  contents: read

jobs:
  gofmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Check formatting
        run: |
          cd hgctl-go
          if [ -n "$(gofmt -l .)" ]; then
            echo "The following files are not formatted properly:"
            gofmt -d .
            exit 1
          fi
          echo "All files are formatted correctly."

  hgctl-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run linter
        run: |
          cd hgctl-go
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          export PATH=$PATH:$(go env GOPATH)/bin
          golangci-lint run ./...

  hgctl-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run tests
        run: |
          cd hgctl-go
          go mod tidy
          make test

  hgctl-test-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_HGCTL_CI_USERNAME }}
          password: ${{ secrets.DOCKERHUB_HGCTL_CI_TOKEN }}

      - name: Normalize Docker config for registry
        run: |
          CONFIG_FILE=~/.docker/config.json

          # Get the auth value from the existing Docker Hub entry
          AUTH_VALUE=$(jq -r '.auths["https://index.docker.io/v1/"].auth' $CONFIG_FILE)

          # Add entries for common Docker Hub registry hostnames
          jq --arg auth "$AUTH_VALUE" '
            .auths["docker.io"] = {"auth": $auth} |
            .auths["registry-1.docker.io"] = {"auth": $auth}
          ' $CONFIG_FILE > $CONFIG_FILE.tmp

          mv $CONFIG_FILE.tmp $CONFIG_FILE

          echo "Docker config updated"
          cat $CONFIG_FILE

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Zeus
        run: npm install -g @layr-labs/zeus@1.5.9

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          # Install yq (YAML processor)
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Install DevKit manually
        run: |
          # Tar-based installation:
          # DEVKIT_VERSION="v0.1.0-preview.7.rc"
          # INSTALL_DIR="$HOME/bin"
          # mkdir -p "$INSTALL_DIR"
          # DEVKIT_URL="https://s3.amazonaws.com/eigenlayer-devkit-releases/${DEVKIT_VERSION}/devkit-linux-amd64-${DEVKIT_VERSION}.tar.gz"
          # echo "Downloading from: $DEVKIT_URL"
          # curl -L -o /tmp/devkit.tar.gz "$DEVKIT_URL"
          # tar -xf /tmp/devkit.tar.gz -C "$INSTALL_DIR"
          # chmod +x "$INSTALL_DIR/devkit"
          # echo "$INSTALL_DIR" >> $GITHUB_PATH

          # Build from source at specific commit
          DEVKIT_REPO="https://github.com/Layr-Labs/devkit-cli.git"
          DEVKIT_COMMIT="f7b5137bebd8644fd45ed0f800045995c7c162b0"
          INSTALL_DIR="$HOME/bin"
          BUILD_DIR="/tmp/devkit-build"

          echo "Cloning DevKit from ${DEVKIT_REPO}..."
          git clone "$DEVKIT_REPO" "$BUILD_DIR"
          cd "$BUILD_DIR"

          echo "Checking out commit ${DEVKIT_COMMIT}..."
          git checkout "$DEVKIT_COMMIT"

          echo "Building DevKit..."
          make build

          echo "Installing DevKit binary..."
          mkdir -p "$INSTALL_DIR"
          cp bin/devkit "$INSTALL_DIR/devkit"
          chmod +x "$INSTALL_DIR/devkit"

          echo "$INSTALL_DIR" >> $GITHUB_PATH

      - name: Run integration tests
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_HGCTL_CI_TOKEN }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_HGCTL_CI_USERNAME }}
        run: |
          cd hgctl-go
          make generate-test-state ENV=staging
          make test-integration

  # Quick build test for PRs - only builds Linux AMD64
  build-test:
    runs-on: ubuntu-latest
    needs: [gofmt, hgctl-lint, hgctl-test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Test build
        env:
          HGCTL_POSTHOG_API_KEY: ${{ secrets.HGCTL_POSTHOG_API_KEY }}
        run: |
          cd hgctl-go
          
          # Just test that the build works
          CGO_ENABLED=1 go build -o /tmp/hgctl-test ./cmd/hgctl
          
          # Test that the binary executes without error
          # Using --help which should work for any CLI tool
          /tmp/hgctl-test --help || /tmp/hgctl-test help || /tmp/hgctl-test || true
          
          # Check that the binary was created and is executable
          if [ -f /tmp/hgctl-test ] && [ -x /tmp/hgctl-test ]; then
            echo "✅ Build test successful - binary created and is executable"
          else
            echo "❌ Build test failed - binary not created or not executable"
            exit 1
          fi

  # Full build for all platforms - only on main branches and tags
  build-binaries:
    needs: [gofmt, hgctl-lint, hgctl-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/'))
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_name: hgctl-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary_name: hgctl-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_name: hgctl-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_name: hgctl-darwin-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      # Special setup for Linux ARM64 cross-compilation
      - name: Install cross-compiler for Linux ARM64
        if: matrix.os == 'ubuntu-latest' && matrix.goarch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Build binary
        env:
          HGCTL_POSTHOG_API_KEY: ${{ secrets.HGCTL_POSTHOG_API_KEY }}
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          cd hgctl-go

          # Get version
          VERSION=$(cat VERSION | tr -d '[:space:]')
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#hgctl-}" # Remove hgctl- prefix from tag
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Set ldflags with API key injection
          COMMIT_HASH=$(git rev-parse --short HEAD)
          LDFLAGS="-X 'github.com/Layr-Labs/hourglass-monorepo/hgctl-go/internal/version.Version=$VERSION' -X 'github.com/Layr-Labs/hourglass-monorepo/hgctl-go/internal/version.Commit=$COMMIT_HASH'"

          # Add PostHog API key if available
          if [ -n "${HGCTL_POSTHOG_API_KEY}" ]; then
            LDFLAGS="$LDFLAGS -X 'github.com/Layr-Labs/hourglass-monorepo/hgctl-go/internal/telemetry.embeddedTelemetryApiKey=${HGCTL_POSTHOG_API_KEY}'"
          fi

          # Set cross-compiler for Linux ARM64
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.goarch }}" == "arm64" ]]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
          fi

          # Build the binary
          go build \
            -ldflags "$LDFLAGS" \
            -o ./release/${{ matrix.binary_name }} \
            ./cmd/hgctl
          
          # Create tar.gz archive
          mkdir -p ./release
          cd release
          tar czf "${{ matrix.binary_name }}-${VERSION}.tar.gz" "${{ matrix.binary_name }}"
          rm "${{ matrix.binary_name }}"
          
          # List created archive
          ls -la *.tar.gz

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: hgctl-go/release/*.tar.gz
          retention-days: 7

  # Merge all artifacts into a single artifact
  merge-artifacts:
    runs-on: ubuntu-latest
    needs: [build-binaries]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts

      - name: Merge artifacts
        run: |
          mkdir -p ./merged
          find ./all-artifacts -name "*.tar.gz" -exec cp {} ./merged/ \;
          ls -la ./merged/

      - name: Upload merged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hgctl-binaries
          path: ./merged/*.tar.gz
          retention-days: 7

  release:
    runs-on: ubuntu-latest
    needs: [merge-artifacts]
    if: startsWith(github.ref, 'refs/tags/hgctl-v')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: hgctl-binaries
          path: ./release

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            ## hgctl Release
            
            ### Installation
            
            #### macOS (Apple Silicon)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hgctl-darwin-arm64-${{ github.ref_name }}.tar.gz | tar xz
            sudo mv hgctl-darwin-arm64 /usr/local/bin/hgctl
            ```
            
            #### macOS (Intel)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hgctl-darwin-amd64-${{ github.ref_name }}.tar.gz | tar xz
            sudo mv hgctl-darwin-amd64 /usr/local/bin/hgctl
            ```
            
            #### Linux (x86_64)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hgctl-linux-amd64-${{ github.ref_name }}.tar.gz | tar xz
            sudo mv hgctl-linux-amd64 /usr/local/bin/hgctl
            ```
            
            #### Linux (ARM64)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/hgctl-linux-arm64-${{ github.ref_name }}.tar.gz | tar xz
            sudo mv hgctl-linux-arm64 /usr/local/bin/hgctl
            ```

      - name: Upload Release Assets
        run: |
          upload_url="${{ steps.create_release.outputs.upload_url }}"
          upload_url="${upload_url/\{?name,label\}/}"
          
          for asset in ./release/*.tar.gz; do
            asset_name=$(basename "$asset")
            echo "Uploading $asset_name..."
            curl --fail \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/gzip" \
              --data-binary @"$asset" \
              "${upload_url}?name=${asset_name}"
          done