name: build ponos

on:
  push:
    branches:
      - "**"
    tags:
      - 'v*'

jobs:
  gofmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      - name: Check formatting
        run: |
          cd ponos
          if [ -n "$(gofmt -l .)" ]; then
            echo "The following files are not formatted properly:"
            gofmt -d .
            exit 1
          fi
          echo "All files are formatted correctly."
  ponos-lint:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      - name: Run linter
        run: |
          cd ponos
          make deps
          export PATH=$PATH:$(go env GOPATH)/bin
          make lint
  ponos-test:
    runs-on: linux-xl-2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
      - name: Run Forge build
        run: |
          forge build --sizes
        working-directory: ./contracts
        id: build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Run tests
        run: |
          which anvil
          cd ponos
          chmod -R 775 internal/testData/
          
          echo "building dependencies"
          make deps
          export PATH=$PATH:$(go env GOPATH)/bin
          
          echo "Running tests"
          export HOURGLASS_TRANSPORT_BLS_KEY="${{ secrets.HOURGLASS_TRANSPORT_BLS_KEY }}"
          make ci-test
  build-container:
    runs-on: protocol-gha-runners-hourglass
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set release version
        env:
          REF: ${{ github.ref }}
        run: |
          cd ponos && ./scripts/version.sh $REF
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: "public.ecr.aws/z6g0f8n7"
          REPOSITORY: "eigenlayer-hourglass"
        run: |
          VERSION=$(cat ./ponos/VERSION | tr -d '[:space:]' | sed 's/+/_/g')
          echo "Building docker image for version $VERSION"
          if [[ $GITHUB_REF == refs/heads/master || $GITHUB_REF == refs/tags/* ]]; then
            docker buildx build --platform "linux/amd64,linux/arm64" -t $REGISTRY/$REPOSITORY:$VERSION -t $REGISTRY/$REPOSITORY:latest --push -f ./ponos/Dockerfile .
          else
            docker buildx build --platform "linux/amd64,linux/arm64" -t $REGISTRY/$REPOSITORY:$VERSION --push -f ./ponos/Dockerfile .
          fi
  build-binaries:
    runs-on: ubuntu-24.04
    needs: [ponos-lint, ponos-test]
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
      - name: Check and set release version
        env:
          REF: ${{ github.ref }}
        run: |
          cd ponos && ./scripts/version.sh $REF
      - name: Build binary
        run: |
          cd ponos
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "Building binary for version $VERSION"
          make release-with-docker
          sudo chown -R $USER:$USER .
          ./scripts/bundleReleases.sh $VERSION
  build-create-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build-container, lint, test ]
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check and set release version
        env:
          REF: ${{ github.ref }}
        run: |
          ./scripts/version.sh $REF
      - name: Build binary
        run: |
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "Building binary for version $VERSION"
          make release-with-docker
          sudo chown -R $USER:$USER .
          ./scripts/bundleReleases.sh $VERSION
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BUCKET_NAME: ${{ vars.RELEASE_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -x
          ls -al ./release

          echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"
          export upload_url=$(echo "${{ steps.create_release.outputs.upload_url }}" | sed -e "s/{?name,label}//")

          for asset_name in $(ls ./release | grep '.tar');
          do
            asset="./release/${asset_name}"
            echo "Uploading ${asset_name}..."
            curl --fail \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: $(file -b --mime-type "$asset")" \
              --data-binary @"$asset" \
              "${upload_url}?name=$asset_name"
          done
  release-helm-chart:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: [ build-binaries ]
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Release Helm Chart
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ./scripts/releaseChart.sh
