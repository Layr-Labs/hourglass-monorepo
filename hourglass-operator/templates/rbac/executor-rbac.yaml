# ServiceAccount for the Executor
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${SERVICE_ACCOUNT_NAME:-executor-service-account}
  namespace: ${NAMESPACE}
  labels:
    app: ${EXECUTOR_NAME}
    component: executor-rbac
automountServiceAccountToken: true

---
# Role for managing Performers in the namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ${NAMESPACE}
  name: ${EXECUTOR_NAME}-role
  labels:
    app: ${EXECUTOR_NAME}
    component: executor-rbac
rules:
# Performer CRD management
- apiGroups: ["hourglass.eigenlayer.io"]
  resources: ["performers"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

# Performer status management
- apiGroups: ["hourglass.eigenlayer.io"]
  resources: ["performers/status"]
  verbs: ["get", "patch", "update"]

# Read-only access to Services (for service discovery)
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]

# Read-only access to Pods (for monitoring performer status)
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

# Read-only access to Events (for debugging)
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch"]

# ConfigMap access (for configuration updates)
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
  resourceNames: ["${EXECUTOR_NAME}-config"]

# Secret access (for operator keys)
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
  resourceNames: ["${EXECUTOR_NAME}-keys"]

---
# RoleBinding to associate the ServiceAccount with the Role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ${EXECUTOR_NAME}-binding
  namespace: ${NAMESPACE}
  labels:
    app: ${EXECUTOR_NAME}
    component: executor-rbac
subjects:
- kind: ServiceAccount
  name: ${SERVICE_ACCOUNT_NAME:-executor-service-account}
  namespace: ${NAMESPACE}
roleRef:
  kind: Role
  name: ${EXECUTOR_NAME}-role
  apiGroup: rbac.authorization.k8s.io

---
# Optional: ClusterRole for cross-namespace service discovery
# This is only needed if the executor needs to discover services in other namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ${EXECUTOR_NAME}-cluster-role
  labels:
    app: ${EXECUTOR_NAME}
    component: executor-rbac
rules:
# Read-only access to nodes (for scheduling decisions and debugging)
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]

# Read-only access to namespaces (for namespace discovery)
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]

# Read-only access to CustomResourceDefinitions (for CRD discovery)
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "watch"]
  resourceNames: ["performers.hourglass.eigenlayer.io"]

---
# Optional: ClusterRoleBinding for cross-namespace access
# Only include this if CROSS_NAMESPACE_ACCESS is enabled
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${EXECUTOR_NAME}-cluster-binding
  labels:
    app: ${EXECUTOR_NAME}
    component: executor-rbac
subjects:
- kind: ServiceAccount
  name: ${SERVICE_ACCOUNT_NAME:-executor-service-account}
  namespace: ${NAMESPACE}
roleRef:
  kind: ClusterRole
  name: ${EXECUTOR_NAME}-cluster-role
  apiGroup: rbac.authorization.k8s.io