// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/contextManager/blockContextManager.go
//
// Generated by this command:
//
//	mockgen -source=pkg/contextManager/blockContextManager.go -destination=mocks/mock_block_context_manager.go -package=mocks IBlockContextManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIBlockContextManager is a mock of IBlockContextManager interface.
type MockIBlockContextManager struct {
	ctrl     *gomock.Controller
	recorder *MockIBlockContextManagerMockRecorder
	isgomock struct{}
}

// MockIBlockContextManagerMockRecorder is the mock recorder for MockIBlockContextManager.
type MockIBlockContextManagerMockRecorder struct {
	mock *MockIBlockContextManager
}

// NewMockIBlockContextManager creates a new mock instance.
func NewMockIBlockContextManager(ctrl *gomock.Controller) *MockIBlockContextManager {
	mock := &MockIBlockContextManager{ctrl: ctrl}
	mock.recorder = &MockIBlockContextManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBlockContextManager) EXPECT() *MockIBlockContextManagerMockRecorder {
	return m.recorder
}

// CancelBlock mocks base method.
func (m *MockIBlockContextManager) CancelBlock(blockNumber uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelBlock", blockNumber)
}

// CancelBlock indicates an expected call of CancelBlock.
func (mr *MockIBlockContextManagerMockRecorder) CancelBlock(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBlock", reflect.TypeOf((*MockIBlockContextManager)(nil).CancelBlock), blockNumber)
}

// GetContext mocks base method.
func (m *MockIBlockContextManager) GetContext(blockNumber uint64, task *types.Task) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext", blockNumber, task)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockIBlockContextManagerMockRecorder) GetContext(blockNumber, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockIBlockContextManager)(nil).GetContext), blockNumber, task)
}
