// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/ethereum/client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/clients/ethereum/client.go -destination=mocks/mock_ethereum_client.go -package=mocks Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ethereum "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/clients/ethereum"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetBlockByNumber mocks base method.
func (m *MockClient) GetBlockByNumber(ctx context.Context, blockNumber uint64) (*ethereum.EthereumBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", ctx, blockNumber)
	ret0, _ := ret[0].(*ethereum.EthereumBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockClientMockRecorder) GetBlockByNumber(ctx, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockClient)(nil).GetBlockByNumber), ctx, blockNumber)
}

// GetLatestBlock mocks base method.
func (m *MockClient) GetLatestBlock(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockClientMockRecorder) GetLatestBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockClient)(nil).GetLatestBlock), ctx)
}

// GetLogs mocks base method.
func (m *MockClient) GetLogs(ctx context.Context, address string, fromBlock, toBlock uint64) ([]*ethereum.EthereumEventLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx, address, fromBlock, toBlock)
	ret0, _ := ret[0].([]*ethereum.EthereumEventLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockClientMockRecorder) GetLogs(ctx, address, fromBlock, toBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockClient)(nil).GetLogs), ctx, address, fromBlock, toBlock)
}
