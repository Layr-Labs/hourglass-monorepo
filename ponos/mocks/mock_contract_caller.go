// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/contractCaller/contractCaller.go
//
// Generated by this command:
//
//	mockgen -source=pkg/contractCaller/contractCaller.go -destination=mocks/mock_contract_caller.go -package=mocks IContractCaller
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bn254 "github.com/Layr-Labs/crypto-libs/pkg/bn254"
	config "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/config"
	contractCaller "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/contractCaller"
	IBN254TableCalculator "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/middleware-bindings/IBN254TableCalculator"
	peering "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/peering"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIContractCaller is a mock of IContractCaller interface.
type MockIContractCaller struct {
	ctrl     *gomock.Controller
	recorder *MockIContractCallerMockRecorder
	isgomock struct{}
}

// MockIContractCallerMockRecorder is the mock recorder for MockIContractCaller.
type MockIContractCallerMockRecorder struct {
	mock *MockIContractCaller
}

// NewMockIContractCaller creates a new mock instance.
func NewMockIContractCaller(ctrl *gomock.Controller) *MockIContractCaller {
	mock := &MockIContractCaller{ctrl: ctrl}
	mock.recorder = &MockIContractCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContractCaller) EXPECT() *MockIContractCallerMockRecorder {
	return m.recorder
}

// CalculateBN254CertificateDigestBytes mocks base method.
func (m *MockIContractCaller) CalculateBN254CertificateDigestBytes(ctx context.Context, referenceTimestamp uint32, messageHash [32]byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateBN254CertificateDigestBytes", ctx, referenceTimestamp, messageHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateBN254CertificateDigestBytes indicates an expected call of CalculateBN254CertificateDigestBytes.
func (mr *MockIContractCallerMockRecorder) CalculateBN254CertificateDigestBytes(ctx, referenceTimestamp, messageHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateBN254CertificateDigestBytes", reflect.TypeOf((*MockIContractCaller)(nil).CalculateBN254CertificateDigestBytes), ctx, referenceTimestamp, messageHash)
}

// CalculateECDSACertificateDigestBytes mocks base method.
func (m *MockIContractCaller) CalculateECDSACertificateDigestBytes(ctx context.Context, referenceTimestamp uint32, messageHash [32]byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateECDSACertificateDigestBytes", ctx, referenceTimestamp, messageHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateECDSACertificateDigestBytes indicates an expected call of CalculateECDSACertificateDigestBytes.
func (mr *MockIContractCallerMockRecorder) CalculateECDSACertificateDigestBytes(ctx, referenceTimestamp, messageHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateECDSACertificateDigestBytes", reflect.TypeOf((*MockIContractCaller)(nil).CalculateECDSACertificateDigestBytes), ctx, referenceTimestamp, messageHash)
}

// CalculateTaskMessageHash mocks base method.
func (m *MockIContractCaller) CalculateTaskMessageHash(ctx context.Context, taskHash [32]byte, result []byte) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTaskMessageHash", ctx, taskHash, result)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateTaskMessageHash indicates an expected call of CalculateTaskMessageHash.
func (mr *MockIContractCallerMockRecorder) CalculateTaskMessageHash(ctx, taskHash, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTaskMessageHash", reflect.TypeOf((*MockIContractCaller)(nil).CalculateTaskMessageHash), ctx, taskHash, result)
}

// ConfigureAVSOperatorSet mocks base method.
func (m *MockIContractCaller) ConfigureAVSOperatorSet(ctx context.Context, avsAddress common.Address, operatorSetId uint32, curveType config.CurveType) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureAVSOperatorSet", ctx, avsAddress, operatorSetId, curveType)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureAVSOperatorSet indicates an expected call of ConfigureAVSOperatorSet.
func (mr *MockIContractCallerMockRecorder) ConfigureAVSOperatorSet(ctx, avsAddress, operatorSetId, curveType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureAVSOperatorSet", reflect.TypeOf((*MockIContractCaller)(nil).ConfigureAVSOperatorSet), ctx, avsAddress, operatorSetId, curveType)
}

// CreateGenerationReservation mocks base method.
func (m *MockIContractCaller) CreateGenerationReservation(ctx context.Context, avsAddress common.Address, operatorSetId uint32, operatorTableCalculatorAddress, owner common.Address, maxStalenessPeriod uint32) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenerationReservation", ctx, avsAddress, operatorSetId, operatorTableCalculatorAddress, owner, maxStalenessPeriod)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenerationReservation indicates an expected call of CreateGenerationReservation.
func (mr *MockIContractCallerMockRecorder) CreateGenerationReservation(ctx, avsAddress, operatorSetId, operatorTableCalculatorAddress, owner, maxStalenessPeriod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenerationReservation", reflect.TypeOf((*MockIContractCaller)(nil).CreateGenerationReservation), ctx, avsAddress, operatorSetId, operatorTableCalculatorAddress, owner, maxStalenessPeriod)
}

// CreateOperatorAndRegisterWithAvs mocks base method.
func (m *MockIContractCaller) CreateOperatorAndRegisterWithAvs(ctx context.Context, avsAddress, operatorAddress common.Address, operatorSetIds []uint32, socket string, allocationDelay uint32, metadataUri string) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperatorAndRegisterWithAvs", ctx, avsAddress, operatorAddress, operatorSetIds, socket, allocationDelay, metadataUri)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOperatorAndRegisterWithAvs indicates an expected call of CreateOperatorAndRegisterWithAvs.
func (mr *MockIContractCallerMockRecorder) CreateOperatorAndRegisterWithAvs(ctx, avsAddress, operatorAddress, operatorSetIds, socket, allocationDelay, metadataUri any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperatorAndRegisterWithAvs", reflect.TypeOf((*MockIContractCaller)(nil).CreateOperatorAndRegisterWithAvs), ctx, avsAddress, operatorAddress, operatorSetIds, socket, allocationDelay, metadataUri)
}

// EncodeBN254KeyData mocks base method.
func (m *MockIContractCaller) EncodeBN254KeyData(pubKey *bn254.PublicKey) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeBN254KeyData", pubKey)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeBN254KeyData indicates an expected call of EncodeBN254KeyData.
func (mr *MockIContractCallerMockRecorder) EncodeBN254KeyData(pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeBN254KeyData", reflect.TypeOf((*MockIContractCaller)(nil).EncodeBN254KeyData), pubKey)
}

// GetAVSConfig mocks base method.
func (m *MockIContractCaller) GetAVSConfig(avsAddress string, blockNumber uint64) (*contractCaller.AVSConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAVSConfig", avsAddress, blockNumber)
	ret0, _ := ret[0].(*contractCaller.AVSConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAVSConfig indicates an expected call of GetAVSConfig.
func (mr *MockIContractCallerMockRecorder) GetAVSConfig(avsAddress, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAVSConfig", reflect.TypeOf((*MockIContractCaller)(nil).GetAVSConfig), avsAddress, blockNumber)
}

// GetExecutorOperatorSetTaskConfig mocks base method.
func (m *MockIContractCaller) GetExecutorOperatorSetTaskConfig(ctx context.Context, avsAddress common.Address, opsetId uint32, blockNumber uint64) (*contractCaller.TaskMailboxExecutorOperatorSetConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutorOperatorSetTaskConfig", ctx, avsAddress, opsetId, blockNumber)
	ret0, _ := ret[0].(*contractCaller.TaskMailboxExecutorOperatorSetConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutorOperatorSetTaskConfig indicates an expected call of GetExecutorOperatorSetTaskConfig.
func (mr *MockIContractCallerMockRecorder) GetExecutorOperatorSetTaskConfig(ctx, avsAddress, opsetId, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutorOperatorSetTaskConfig", reflect.TypeOf((*MockIContractCaller)(nil).GetExecutorOperatorSetTaskConfig), ctx, avsAddress, opsetId, blockNumber)
}

// GetOperatorBN254KeyRegistrationMessageHash mocks base method.
func (m *MockIContractCaller) GetOperatorBN254KeyRegistrationMessageHash(ctx context.Context, operatorAddress, avsAddress common.Address, operatorSetId uint32, keyData []byte) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorBN254KeyRegistrationMessageHash", ctx, operatorAddress, avsAddress, operatorSetId, keyData)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorBN254KeyRegistrationMessageHash indicates an expected call of GetOperatorBN254KeyRegistrationMessageHash.
func (mr *MockIContractCallerMockRecorder) GetOperatorBN254KeyRegistrationMessageHash(ctx, operatorAddress, avsAddress, operatorSetId, keyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorBN254KeyRegistrationMessageHash", reflect.TypeOf((*MockIContractCaller)(nil).GetOperatorBN254KeyRegistrationMessageHash), ctx, operatorAddress, avsAddress, operatorSetId, keyData)
}

// GetOperatorECDSAKeyRegistrationMessageHash mocks base method.
func (m *MockIContractCaller) GetOperatorECDSAKeyRegistrationMessageHash(ctx context.Context, operatorAddress, avsAddress common.Address, operatorSetId uint32, signingKeyAddress common.Address) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorECDSAKeyRegistrationMessageHash", ctx, operatorAddress, avsAddress, operatorSetId, signingKeyAddress)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorECDSAKeyRegistrationMessageHash indicates an expected call of GetOperatorECDSAKeyRegistrationMessageHash.
func (mr *MockIContractCallerMockRecorder) GetOperatorECDSAKeyRegistrationMessageHash(ctx, operatorAddress, avsAddress, operatorSetId, signingKeyAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorECDSAKeyRegistrationMessageHash", reflect.TypeOf((*MockIContractCaller)(nil).GetOperatorECDSAKeyRegistrationMessageHash), ctx, operatorAddress, avsAddress, operatorSetId, signingKeyAddress)
}

// GetOperatorInfoTreeRoot mocks base method.
func (m *MockIContractCaller) GetOperatorInfoTreeRoot(ctx context.Context, avsAddress common.Address, opSetId uint32, taskBlockNumber uint64, referenceTimestamp uint32) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorInfoTreeRoot", ctx, avsAddress, opSetId, taskBlockNumber, referenceTimestamp)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorInfoTreeRoot indicates an expected call of GetOperatorInfoTreeRoot.
func (mr *MockIContractCallerMockRecorder) GetOperatorInfoTreeRoot(ctx, avsAddress, opSetId, taskBlockNumber, referenceTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorInfoTreeRoot", reflect.TypeOf((*MockIContractCaller)(nil).GetOperatorInfoTreeRoot), ctx, avsAddress, opSetId, taskBlockNumber, referenceTimestamp)
}

// GetOperatorInfos mocks base method.
func (m *MockIContractCaller) GetOperatorInfos(ctx context.Context, avsAddress common.Address, opSetId uint32, referenceBlockNumber uint64) ([]IBN254TableCalculator.IOperatorTableCalculatorTypesBN254OperatorInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorInfos", ctx, avsAddress, opSetId, referenceBlockNumber)
	ret0, _ := ret[0].([]IBN254TableCalculator.IOperatorTableCalculatorTypesBN254OperatorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorInfos indicates an expected call of GetOperatorInfos.
func (mr *MockIContractCallerMockRecorder) GetOperatorInfos(ctx, avsAddress, opSetId, referenceBlockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorInfos", reflect.TypeOf((*MockIContractCaller)(nil).GetOperatorInfos), ctx, avsAddress, opSetId, referenceBlockNumber)
}

// GetOperatorSetCurveType mocks base method.
func (m *MockIContractCaller) GetOperatorSetCurveType(avsAddress string, operatorSetId uint32, blockNumber uint64) (config.CurveType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorSetCurveType", avsAddress, operatorSetId, blockNumber)
	ret0, _ := ret[0].(config.CurveType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorSetCurveType indicates an expected call of GetOperatorSetCurveType.
func (mr *MockIContractCallerMockRecorder) GetOperatorSetCurveType(avsAddress, operatorSetId, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorSetCurveType", reflect.TypeOf((*MockIContractCaller)(nil).GetOperatorSetCurveType), avsAddress, operatorSetId, blockNumber)
}

// GetOperatorSetDetailsForOperator mocks base method.
func (m *MockIContractCaller) GetOperatorSetDetailsForOperator(operatorAddress common.Address, avsAddress string, operatorSetId uint32, blockNumber uint64) (*peering.OperatorSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorSetDetailsForOperator", operatorAddress, avsAddress, operatorSetId, blockNumber)
	ret0, _ := ret[0].(*peering.OperatorSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorSetDetailsForOperator indicates an expected call of GetOperatorSetDetailsForOperator.
func (mr *MockIContractCallerMockRecorder) GetOperatorSetDetailsForOperator(operatorAddress, avsAddress, operatorSetId, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorSetDetailsForOperator", reflect.TypeOf((*MockIContractCaller)(nil).GetOperatorSetDetailsForOperator), operatorAddress, avsAddress, operatorSetId, blockNumber)
}

// GetOperatorSetMembersWithPeering mocks base method.
func (m *MockIContractCaller) GetOperatorSetMembersWithPeering(avsAddress string, operatorSetId uint32, blockNumber uint64) ([]*peering.OperatorPeerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorSetMembersWithPeering", avsAddress, operatorSetId, blockNumber)
	ret0, _ := ret[0].([]*peering.OperatorPeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorSetMembersWithPeering indicates an expected call of GetOperatorSetMembersWithPeering.
func (mr *MockIContractCallerMockRecorder) GetOperatorSetMembersWithPeering(avsAddress, operatorSetId, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorSetMembersWithPeering", reflect.TypeOf((*MockIContractCaller)(nil).GetOperatorSetMembersWithPeering), avsAddress, operatorSetId, blockNumber)
}

// GetOperatorTableDataForOperatorSet mocks base method.
func (m *MockIContractCaller) GetOperatorTableDataForOperatorSet(ctx context.Context, avsAddress common.Address, operatorSetId uint32, chainId config.ChainId, atBlockNumber uint64) (*contractCaller.OperatorTableData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorTableDataForOperatorSet", ctx, avsAddress, operatorSetId, chainId, atBlockNumber)
	ret0, _ := ret[0].(*contractCaller.OperatorTableData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorTableDataForOperatorSet indicates an expected call of GetOperatorTableDataForOperatorSet.
func (mr *MockIContractCallerMockRecorder) GetOperatorTableDataForOperatorSet(ctx, avsAddress, operatorSetId, chainId, atBlockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorTableDataForOperatorSet", reflect.TypeOf((*MockIContractCaller)(nil).GetOperatorTableDataForOperatorSet), ctx, avsAddress, operatorSetId, chainId, atBlockNumber)
}

// GetSupportedChainsForMultichain mocks base method.
func (m *MockIContractCaller) GetSupportedChainsForMultichain(ctx context.Context, referenceBlockNumber uint64) ([]*big.Int, []common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedChainsForMultichain", ctx, referenceBlockNumber)
	ret0, _ := ret[0].([]*big.Int)
	ret1, _ := ret[1].([]common.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSupportedChainsForMultichain indicates an expected call of GetSupportedChainsForMultichain.
func (mr *MockIContractCallerMockRecorder) GetSupportedChainsForMultichain(ctx, referenceBlockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedChainsForMultichain", reflect.TypeOf((*MockIContractCaller)(nil).GetSupportedChainsForMultichain), ctx, referenceBlockNumber)
}

// GetTableUpdaterReferenceTimeAndBlock mocks base method.
func (m *MockIContractCaller) GetTableUpdaterReferenceTimeAndBlock(ctx context.Context, tableUpdaterAddr common.Address, atBlockNumber uint64) (*contractCaller.LatestReferenceTimeAndBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableUpdaterReferenceTimeAndBlock", ctx, tableUpdaterAddr, atBlockNumber)
	ret0, _ := ret[0].(*contractCaller.LatestReferenceTimeAndBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableUpdaterReferenceTimeAndBlock indicates an expected call of GetTableUpdaterReferenceTimeAndBlock.
func (mr *MockIContractCallerMockRecorder) GetTableUpdaterReferenceTimeAndBlock(ctx, tableUpdaterAddr, atBlockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableUpdaterReferenceTimeAndBlock", reflect.TypeOf((*MockIContractCaller)(nil).GetTableUpdaterReferenceTimeAndBlock), ctx, tableUpdaterAddr, atBlockNumber)
}

// PublishMessageToInbox mocks base method.
func (m *MockIContractCaller) PublishMessageToInbox(ctx context.Context, avsAddress string, operatorSetId uint32, payload []byte) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessageToInbox", ctx, avsAddress, operatorSetId, payload)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMessageToInbox indicates an expected call of PublishMessageToInbox.
func (mr *MockIContractCallerMockRecorder) PublishMessageToInbox(ctx, avsAddress, operatorSetId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessageToInbox", reflect.TypeOf((*MockIContractCaller)(nil).PublishMessageToInbox), ctx, avsAddress, operatorSetId, payload)
}

// RegisterKeyWithKeyRegistrar mocks base method.
func (m *MockIContractCaller) RegisterKeyWithKeyRegistrar(ctx context.Context, operatorAddress, avsAddress common.Address, operatorSetId uint32, sigBytes, keyData []byte) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterKeyWithKeyRegistrar", ctx, operatorAddress, avsAddress, operatorSetId, sigBytes, keyData)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterKeyWithKeyRegistrar indicates an expected call of RegisterKeyWithKeyRegistrar.
func (mr *MockIContractCallerMockRecorder) RegisterKeyWithKeyRegistrar(ctx, operatorAddress, avsAddress, operatorSetId, sigBytes, keyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterKeyWithKeyRegistrar", reflect.TypeOf((*MockIContractCaller)(nil).RegisterKeyWithKeyRegistrar), ctx, operatorAddress, avsAddress, operatorSetId, sigBytes, keyData)
}

// SetupTaskMailboxForAvs mocks base method.
func (m *MockIContractCaller) SetupTaskMailboxForAvs(ctx context.Context, avsAddress, taskHookAddress common.Address, executorOperatorSetIds []uint32, curveTypes []config.CurveType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupTaskMailboxForAvs", ctx, avsAddress, taskHookAddress, executorOperatorSetIds, curveTypes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupTaskMailboxForAvs indicates an expected call of SetupTaskMailboxForAvs.
func (mr *MockIContractCallerMockRecorder) SetupTaskMailboxForAvs(ctx, avsAddress, taskHookAddress, executorOperatorSetIds, curveTypes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupTaskMailboxForAvs", reflect.TypeOf((*MockIContractCaller)(nil).SetupTaskMailboxForAvs), ctx, avsAddress, taskHookAddress, executorOperatorSetIds, curveTypes)
}

// SubmitBN254TaskResult mocks base method.
func (m *MockIContractCaller) SubmitBN254TaskResult(ctx context.Context, params *contractCaller.BN254TaskResultParams, infos []contractCaller.BN254OperatorInfo, globalTableRootReferenceTimestamp uint32, operatorInfoTreeRoot [32]byte) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBN254TaskResult", ctx, params, infos, globalTableRootReferenceTimestamp, operatorInfoTreeRoot)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitBN254TaskResult indicates an expected call of SubmitBN254TaskResult.
func (mr *MockIContractCallerMockRecorder) SubmitBN254TaskResult(ctx, params, infos, globalTableRootReferenceTimestamp, operatorInfoTreeRoot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBN254TaskResult", reflect.TypeOf((*MockIContractCaller)(nil).SubmitBN254TaskResult), ctx, params, infos, globalTableRootReferenceTimestamp, operatorInfoTreeRoot)
}

// SubmitBN254TaskResultRetryable mocks base method.
func (m *MockIContractCaller) SubmitBN254TaskResultRetryable(ctx context.Context, params *contractCaller.BN254TaskResultParams, infos []contractCaller.BN254OperatorInfo, globalTableRootReferenceTimestamp uint32, operatorInfoTreeRoot [32]byte) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBN254TaskResultRetryable", ctx, params, infos, globalTableRootReferenceTimestamp, operatorInfoTreeRoot)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitBN254TaskResultRetryable indicates an expected call of SubmitBN254TaskResultRetryable.
func (mr *MockIContractCallerMockRecorder) SubmitBN254TaskResultRetryable(ctx, params, infos, globalTableRootReferenceTimestamp, operatorInfoTreeRoot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBN254TaskResultRetryable", reflect.TypeOf((*MockIContractCaller)(nil).SubmitBN254TaskResultRetryable), ctx, params, infos, globalTableRootReferenceTimestamp, operatorInfoTreeRoot)
}

// SubmitECDSATaskResult mocks base method.
func (m *MockIContractCaller) SubmitECDSATaskResult(ctx context.Context, params *contractCaller.ECDSATaskResultParams, globalTableRootReferenceTimestamp uint32) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitECDSATaskResult", ctx, params, globalTableRootReferenceTimestamp)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitECDSATaskResult indicates an expected call of SubmitECDSATaskResult.
func (mr *MockIContractCallerMockRecorder) SubmitECDSATaskResult(ctx, params, globalTableRootReferenceTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitECDSATaskResult", reflect.TypeOf((*MockIContractCaller)(nil).SubmitECDSATaskResult), ctx, params, globalTableRootReferenceTimestamp)
}

// SubmitECDSATaskResultRetryable mocks base method.
func (m *MockIContractCaller) SubmitECDSATaskResultRetryable(ctx context.Context, params *contractCaller.ECDSATaskResultParams, globalTableRootReferenceTimestamp uint32) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitECDSATaskResultRetryable", ctx, params, globalTableRootReferenceTimestamp)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitECDSATaskResultRetryable indicates an expected call of SubmitECDSATaskResultRetryable.
func (mr *MockIContractCallerMockRecorder) SubmitECDSATaskResultRetryable(ctx, params, globalTableRootReferenceTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitECDSATaskResultRetryable", reflect.TypeOf((*MockIContractCaller)(nil).SubmitECDSATaskResultRetryable), ctx, params, globalTableRootReferenceTimestamp)
}

// VerifyBN254Certificate mocks base method.
func (m *MockIContractCaller) VerifyBN254Certificate(ctx context.Context, avsAddress common.Address, operatorSetId uint32, params *contractCaller.BN254TaskResultParams, operatorInfos []contractCaller.BN254OperatorInfo, globalTableRootReferenceTimestamp uint32, operatorInfoTreeRoot [32]byte, thresholdPercentage uint16) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyBN254Certificate", ctx, avsAddress, operatorSetId, params, operatorInfos, globalTableRootReferenceTimestamp, operatorInfoTreeRoot, thresholdPercentage)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyBN254Certificate indicates an expected call of VerifyBN254Certificate.
func (mr *MockIContractCallerMockRecorder) VerifyBN254Certificate(ctx, avsAddress, operatorSetId, params, operatorInfos, globalTableRootReferenceTimestamp, operatorInfoTreeRoot, thresholdPercentage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyBN254Certificate", reflect.TypeOf((*MockIContractCaller)(nil).VerifyBN254Certificate), ctx, avsAddress, operatorSetId, params, operatorInfos, globalTableRootReferenceTimestamp, operatorInfoTreeRoot, thresholdPercentage)
}

// VerifyECDSACertificate mocks base method.
func (m *MockIContractCaller) VerifyECDSACertificate(messageHash [32]byte, signature []byte, avsAddress common.Address, operatorSetId, globalTableRootReferenceTimestamp uint32, threshold uint16) (bool, []common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyECDSACertificate", messageHash, signature, avsAddress, operatorSetId, globalTableRootReferenceTimestamp, threshold)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]common.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyECDSACertificate indicates an expected call of VerifyECDSACertificate.
func (mr *MockIContractCallerMockRecorder) VerifyECDSACertificate(messageHash, signature, avsAddress, operatorSetId, globalTableRootReferenceTimestamp, threshold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyECDSACertificate", reflect.TypeOf((*MockIContractCaller)(nil).VerifyECDSACertificate), messageHash, signature, avsAddress, operatorSetId, globalTableRootReferenceTimestamp, threshold)
}
