// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/peering/peering.go
//
// Generated by this command:
//
//	mockgen -source=pkg/peering/peering.go -destination=mocks/mock_peering_data_fetcher.go -package=mocks IPeeringDataFetcher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	peering "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/peering"
	gomock "go.uber.org/mock/gomock"
)

// MockIPeeringDataFetcher is a mock of IPeeringDataFetcher interface.
type MockIPeeringDataFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockIPeeringDataFetcherMockRecorder
	isgomock struct{}
}

// MockIPeeringDataFetcherMockRecorder is the mock recorder for MockIPeeringDataFetcher.
type MockIPeeringDataFetcherMockRecorder struct {
	mock *MockIPeeringDataFetcher
}

// NewMockIPeeringDataFetcher creates a new mock instance.
func NewMockIPeeringDataFetcher(ctrl *gomock.Controller) *MockIPeeringDataFetcher {
	mock := &MockIPeeringDataFetcher{ctrl: ctrl}
	mock.recorder = &MockIPeeringDataFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPeeringDataFetcher) EXPECT() *MockIPeeringDataFetcherMockRecorder {
	return m.recorder
}

// ListAggregatorOperators mocks base method.
func (m *MockIPeeringDataFetcher) ListAggregatorOperators(ctx context.Context, avsAddress string, blockNumber uint64) ([]*peering.OperatorPeerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAggregatorOperators", ctx, avsAddress, blockNumber)
	ret0, _ := ret[0].([]*peering.OperatorPeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatorOperators indicates an expected call of ListAggregatorOperators.
func (mr *MockIPeeringDataFetcherMockRecorder) ListAggregatorOperators(ctx, avsAddress, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatorOperators", reflect.TypeOf((*MockIPeeringDataFetcher)(nil).ListAggregatorOperators), ctx, avsAddress, blockNumber)
}

// ListExecutorOperators mocks base method.
func (m *MockIPeeringDataFetcher) ListExecutorOperators(ctx context.Context, avsAddress string, blockNumber uint64) ([]*peering.OperatorPeerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutorOperators", ctx, avsAddress, blockNumber)
	ret0, _ := ret[0].([]*peering.OperatorPeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutorOperators indicates an expected call of ListExecutorOperators.
func (mr *MockIPeeringDataFetcherMockRecorder) ListExecutorOperators(ctx, avsAddress, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutorOperators", reflect.TypeOf((*MockIPeeringDataFetcher)(nil).ListExecutorOperators), ctx, avsAddress, blockNumber)
}
