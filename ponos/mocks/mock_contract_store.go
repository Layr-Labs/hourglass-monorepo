// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/contractStore/contractStore.go
//
// Generated by this command:
//
//	mockgen -source=pkg/contractStore/contractStore.go -destination=mocks/mock_contract_store.go -package=mocks IContractStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	config "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/config"
	contracts "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/contracts"
	gomock "go.uber.org/mock/gomock"
)

// MockIContractStore is a mock of IContractStore interface.
type MockIContractStore struct {
	ctrl     *gomock.Controller
	recorder *MockIContractStoreMockRecorder
	isgomock struct{}
}

// MockIContractStoreMockRecorder is the mock recorder for MockIContractStore.
type MockIContractStoreMockRecorder struct {
	mock *MockIContractStore
}

// NewMockIContractStore creates a new mock instance.
func NewMockIContractStore(ctrl *gomock.Controller) *MockIContractStore {
	mock := &MockIContractStore{ctrl: ctrl}
	mock.recorder = &MockIContractStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContractStore) EXPECT() *MockIContractStoreMockRecorder {
	return m.recorder
}

// GetContractByAddress mocks base method.
func (m *MockIContractStore) GetContractByAddress(address string) (*contracts.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractByAddress", address)
	ret0, _ := ret[0].(*contracts.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractByAddress indicates an expected call of GetContractByAddress.
func (mr *MockIContractStoreMockRecorder) GetContractByAddress(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractByAddress", reflect.TypeOf((*MockIContractStore)(nil).GetContractByAddress), address)
}

// GetContractByNameForChainId mocks base method.
func (m *MockIContractStore) GetContractByNameForChainId(name string, chainId config.ChainId) (*contracts.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractByNameForChainId", name, chainId)
	ret0, _ := ret[0].(*contracts.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractByNameForChainId indicates an expected call of GetContractByNameForChainId.
func (mr *MockIContractStoreMockRecorder) GetContractByNameForChainId(name, chainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractByNameForChainId", reflect.TypeOf((*MockIContractStore)(nil).GetContractByNameForChainId), name, chainId)
}

// ListContractAddressesForChain mocks base method.
func (m *MockIContractStore) ListContractAddressesForChain(chainId config.ChainId) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContractAddressesForChain", chainId)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListContractAddressesForChain indicates an expected call of ListContractAddressesForChain.
func (mr *MockIContractStoreMockRecorder) ListContractAddressesForChain(chainId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContractAddressesForChain", reflect.TypeOf((*MockIContractStore)(nil).ListContractAddressesForChain), chainId)
}

// ListContracts mocks base method.
func (m *MockIContractStore) ListContracts() []*contracts.Contract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContracts")
	ret0, _ := ret[0].([]*contracts.Contract)
	return ret0
}

// ListContracts indicates an expected call of ListContracts.
func (mr *MockIContractStoreMockRecorder) ListContracts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContracts", reflect.TypeOf((*MockIContractStore)(nil).ListContracts))
}

// OverrideContract mocks base method.
func (m *MockIContractStore) OverrideContract(contractName string, chainIds []config.ChainId, contract *contracts.Contract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OverrideContract", contractName, chainIds, contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// OverrideContract indicates an expected call of OverrideContract.
func (mr *MockIContractStoreMockRecorder) OverrideContract(contractName, chainIds, contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverrideContract", reflect.TypeOf((*MockIContractStore)(nil).OverrideContract), contractName, chainIds, contract)
}
