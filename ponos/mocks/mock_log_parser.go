// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/transactionLogParser/transactionLogParser.go
//
// Generated by this command:
//
//	mockgen -source=pkg/transactionLogParser/transactionLogParser.go -destination=mocks/mock_log_parser.go -package=mocks LogParser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	ethereum "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/clients/ethereum"
	log "github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/transactionLogParser/log"
	abi "github.com/ethereum/go-ethereum/accounts/abi"
	gomock "go.uber.org/mock/gomock"
)

// MockLogParser is a mock of LogParser interface.
type MockLogParser struct {
	ctrl     *gomock.Controller
	recorder *MockLogParserMockRecorder
	isgomock struct{}
}

// MockLogParserMockRecorder is the mock recorder for MockLogParser.
type MockLogParserMockRecorder struct {
	mock *MockLogParser
}

// NewMockLogParser creates a new mock instance.
func NewMockLogParser(ctrl *gomock.Controller) *MockLogParser {
	mock := &MockLogParser{ctrl: ctrl}
	mock.recorder = &MockLogParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogParser) EXPECT() *MockLogParserMockRecorder {
	return m.recorder
}

// DecodeLog mocks base method.
func (m *MockLogParser) DecodeLog(a *abi.ABI, lg *ethereum.EthereumEventLog) (*log.DecodedLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeLog", a, lg)
	ret0, _ := ret[0].(*log.DecodedLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeLog indicates an expected call of DecodeLog.
func (mr *MockLogParserMockRecorder) DecodeLog(a, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeLog", reflect.TypeOf((*MockLogParser)(nil).DecodeLog), a, lg)
}
