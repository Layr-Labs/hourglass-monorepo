syntax = "proto3";

package eigenlayer.hourglass.v1.executor;

option go_package = "github.com/Layr-Labs/hourglass-monorepo/ponos/gen/protos/eigenlayer/hourglass/v1/executor";

message HandshakeRequest {
  string aggregator_address = 1;            // address of the aggregator so the operator knows who sent the message
  string avs_address = 2;                   // address of the AVS so the aggregator knows who sent the message
  string nonce = 3;                         // nonce, generated by the aggregator
  bytes aggregator_nonce_sig = 4;          // nonce signed with the aggregator's key. used by the operator to verify identity of aggregator
  string destination_operator_address = 5;  // address of operator the message is intended for (operator can self-check, more for debugging)
}

message HandshakeResponse {
  bytes operator_signed_nonce = 1;         // nonce signed with the operator's key for the aggregator to validate
  string auth_token = 2;
  bytes auth_token_signature = 3; // signature of the auth token signed with the operator's key to verify
}

message AuthenticateConnection {
  string aggregator_address = 1;              // address of the aggregator that wants to connect
  string operator_signed_nonce = 2;           // the signed nonce the operator sent back in the handshake
  string operator_signed_nonce_signature = 3; // signature of the operator_signed_nonce signed with aggregator key to verify
}
message AuthenticateConnectionAck {}

message Ping {
  uint64 current_time = 1;
}
message Pong {
  uint64 current_time = 1;
}

message RequestPayload {
  oneof payload {
    AuthenticateConnection authenticate_connection = 1;
    Ping ping = 2;
  }
}
message ResponsePayload {
  oneof payload {
    AuthenticateConnectionAck authenticate_connection_ack = 1;
    Pong pong = 2;
  }
}

message WorkStreamRequest {
  string message_id = 1;
  string auth_token = 2;

  RequestPayload payload = 3;
}

message WorkStreamResponse {
  string message_id = 1;
  string auth_token = 2;

  ResponsePayload payload = 3;
}

// gRPC service
service ExecutorService {
  rpc Handshake(HandshakeRequest) returns (HandshakeResponse) {}
  rpc WorkStream(stream WorkStreamRequest) returns (stream WorkStreamResponse) {}
}
