syntax = "proto3";

package eigenlayer.hourglass.v1;

import "eigenlayer/hourglass/v1/common/auth.proto";

option go_package = "github.com/Layr-Labs/hourglass-monorepo/ponos/gen/protos/eigenlayer/hourglass/v1/executor";

// This server is implemented by the executor and is used to submit tasks to the executor from the aggregator
service ExecutorService {
  // SubmitTask submits a task to the executor from the aggregator
  rpc SubmitTask(TaskSubmission) returns (TaskResult) {}
}

service ExecutorManagementService {
  // DeployArtifact deploys a new artifact to an AVS performer
  rpc DeployArtifact(DeployArtifactRequest) returns (DeployArtifactResponse) {}

  // ListPerformers returns a list of all performers an d their status
  rpc ListPerformers(ListPerformersRequest) returns (ListPerformersResponse) {}

  // RemovePerformer removes a performer from the executor
  rpc RemovePerformer(RemovePerformerRequest) returns (RemovePerformerResponse) {}
  
  // GetChallengeToken returns a challenge token for authentication purposes
  rpc GetChallengeToken(GetChallengeTokenRequest) returns (GetChallengeTokenResponse) {}
}


// TaskSubmission is the message used to submit a task to the executor from the aggregator
message TaskSubmission {
  string task_id = 1;
  string aggregator_address = 2;
  string avs_address = 3;
  bytes payload = 4;
  bytes signature = 5;
  uint32 operator_set_id = 6;
  uint32 reference_timestamp = 7;
  string executor_address = 8;
  uint64 task_block_number = 9;
  uint32 version = 10;
}

message TaskResult {
  string task_id = 1;
  string operator_address = 2;
  bytes output = 3;
  bytes result_signature = 4;
  string avs_address = 5;
  uint32 operator_set_id = 6;
  bytes auth_signature = 7;
  uint32 version = 8;
}

// KubernetesConfig contains Kubernetes-specific configuration for a performer
message KubernetesConfig {
  string service_account_name = 1;
}

// DeployArtifactRequest is the message used to deploy a new artifact to an AVS performer
message DeployArtifactRequest {
  string avs_address = 1;
  string digest = 2;
  string registry_url = 3;
  repeated PerformerEnv env = 4;
  KubernetesConfig kubernetes = 5;
  eigenlayer.hourglass.v1.common.AuthSignature auth = 6;
}

message DeployArtifactResponse {
  bool success = 1;
  string message = 2;
  string deployment_id = 3;
}

// ListPerformersRequest is the message used to list all performers
message ListPerformersRequest {
  // Optional: filter by AVS address
  string avs_address = 1;
  eigenlayer.hourglass.v1.common.AuthSignature auth = 2;
}

message PerformerEnv {
  string name = 1;
  string value = 2;
  string value_from_env = 3;
  KubernetesEnv kubernetes_env = 4;
}

// KubernetesEnv represents a Kubernetes environment variable source
message KubernetesEnv {
  EnvValueFrom value_from = 1;
}

// EnvValueFrom represents a source for the value of an environment variable
message EnvValueFrom {
  SecretKeyRef secret_key_ref = 1;
  ConfigMapKeyRef config_map_key_ref = 2;
}

// SecretKeyRef selects a key of a secret in the pod's namespace
message SecretKeyRef {
  string name = 1;
  string key = 2;
}

// ConfigMapKeyRef selects a key of a config map in the pod's namespace
message ConfigMapKeyRef {
  string name = 1;
  string key = 2;
}

// Performer contains information about a single performer
message Performer {
  string performer_id = 1;
  string avs_address = 2;
  string status = 3;
  string artifact_registry = 4;
  string artifact_digest = 5;
  bool resource_healthy = 6;
  bool application_healthy = 7;
  string last_health_check = 8;
  string container_id = 9;
  string artifact_tag = 10;
}

// ListPerformersResponse contains the list of all performers
message ListPerformersResponse {
  repeated Performer performers = 1;
}

// RemovePerformerRequest is the message used to remove a performer
message RemovePerformerRequest {
  string performer_id = 1;
  eigenlayer.hourglass.v1.common.AuthSignature auth = 2;
}

// RemovePerformerResponse contains the result of performer removal
message RemovePerformerResponse {
  bool success = 1;
  string message = 2;
}

// GetChallengeTokenRequest is used to request a challenge token for authentication
message GetChallengeTokenRequest {
  string operator_address = 1;
}

// GetChallengeTokenResponse returns a challenge token for authentication
message GetChallengeTokenResponse {
  string challenge_token = 1;
  int64 expires_at = 2;  // Unix timestamp when token expires
}
