// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eigenlayer/hourglass/v1/aggregator/aggregator.proto

package aggregator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AggregatorManagementService_RegisterAvs_FullMethodName       = "/eigenlayer.hourglass.v1.AggregatorManagementService/RegisterAvs"
	AggregatorManagementService_DeRegisterAvs_FullMethodName     = "/eigenlayer.hourglass.v1.AggregatorManagementService/DeRegisterAvs"
	AggregatorManagementService_GetChallengeToken_FullMethodName = "/eigenlayer.hourglass.v1.AggregatorManagementService/GetChallengeToken"
)

// AggregatorManagementServiceClient is the client API for AggregatorManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorManagementServiceClient interface {
	RegisterAvs(ctx context.Context, in *RegisterAvsRequest, opts ...grpc.CallOption) (*RegisterAvsResponse, error)
	DeRegisterAvs(ctx context.Context, in *DeRegisterAvsRequest, opts ...grpc.CallOption) (*DeRegisterAvsResponse, error)
	// GetChallengeToken returns a challenge token for authentication purposes
	GetChallengeToken(ctx context.Context, in *AggregatorGetChallengeTokenRequest, opts ...grpc.CallOption) (*AggregatorGetChallengeTokenResponse, error)
}

type aggregatorManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorManagementServiceClient(cc grpc.ClientConnInterface) AggregatorManagementServiceClient {
	return &aggregatorManagementServiceClient{cc}
}

func (c *aggregatorManagementServiceClient) RegisterAvs(ctx context.Context, in *RegisterAvsRequest, opts ...grpc.CallOption) (*RegisterAvsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAvsResponse)
	err := c.cc.Invoke(ctx, AggregatorManagementService_RegisterAvs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorManagementServiceClient) DeRegisterAvs(ctx context.Context, in *DeRegisterAvsRequest, opts ...grpc.CallOption) (*DeRegisterAvsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeRegisterAvsResponse)
	err := c.cc.Invoke(ctx, AggregatorManagementService_DeRegisterAvs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorManagementServiceClient) GetChallengeToken(ctx context.Context, in *AggregatorGetChallengeTokenRequest, opts ...grpc.CallOption) (*AggregatorGetChallengeTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AggregatorGetChallengeTokenResponse)
	err := c.cc.Invoke(ctx, AggregatorManagementService_GetChallengeToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorManagementServiceServer is the server API for AggregatorManagementService service.
// All implementations should embed UnimplementedAggregatorManagementServiceServer
// for forward compatibility.
type AggregatorManagementServiceServer interface {
	RegisterAvs(context.Context, *RegisterAvsRequest) (*RegisterAvsResponse, error)
	DeRegisterAvs(context.Context, *DeRegisterAvsRequest) (*DeRegisterAvsResponse, error)
	// GetChallengeToken returns a challenge token for authentication purposes
	GetChallengeToken(context.Context, *AggregatorGetChallengeTokenRequest) (*AggregatorGetChallengeTokenResponse, error)
}

// UnimplementedAggregatorManagementServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregatorManagementServiceServer struct{}

func (UnimplementedAggregatorManagementServiceServer) RegisterAvs(context.Context, *RegisterAvsRequest) (*RegisterAvsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAvs not implemented")
}
func (UnimplementedAggregatorManagementServiceServer) DeRegisterAvs(context.Context, *DeRegisterAvsRequest) (*DeRegisterAvsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegisterAvs not implemented")
}
func (UnimplementedAggregatorManagementServiceServer) GetChallengeToken(context.Context, *AggregatorGetChallengeTokenRequest) (*AggregatorGetChallengeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengeToken not implemented")
}
func (UnimplementedAggregatorManagementServiceServer) testEmbeddedByValue() {}

// UnsafeAggregatorManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorManagementServiceServer will
// result in compilation errors.
type UnsafeAggregatorManagementServiceServer interface {
	mustEmbedUnimplementedAggregatorManagementServiceServer()
}

func RegisterAggregatorManagementServiceServer(s grpc.ServiceRegistrar, srv AggregatorManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedAggregatorManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggregatorManagementService_ServiceDesc, srv)
}

func _AggregatorManagementService_RegisterAvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAvsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorManagementServiceServer).RegisterAvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregatorManagementService_RegisterAvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorManagementServiceServer).RegisterAvs(ctx, req.(*RegisterAvsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorManagementService_DeRegisterAvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeRegisterAvsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorManagementServiceServer).DeRegisterAvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregatorManagementService_DeRegisterAvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorManagementServiceServer).DeRegisterAvs(ctx, req.(*DeRegisterAvsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorManagementService_GetChallengeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorGetChallengeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorManagementServiceServer).GetChallengeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregatorManagementService_GetChallengeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorManagementServiceServer).GetChallengeToken(ctx, req.(*AggregatorGetChallengeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregatorManagementService_ServiceDesc is the grpc.ServiceDesc for AggregatorManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregatorManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eigenlayer.hourglass.v1.AggregatorManagementService",
	HandlerType: (*AggregatorManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAvs",
			Handler:    _AggregatorManagementService_RegisterAvs_Handler,
		},
		{
			MethodName: "DeRegisterAvs",
			Handler:    _AggregatorManagementService_DeRegisterAvs_Handler,
		},
		{
			MethodName: "GetChallengeToken",
			Handler:    _AggregatorManagementService_GetChallengeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eigenlayer/hourglass/v1/aggregator/aggregator.proto",
}
