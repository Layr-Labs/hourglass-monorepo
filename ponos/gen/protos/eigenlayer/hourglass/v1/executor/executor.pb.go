// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: eigenlayer/hourglass/v1/executor/executor.proto

package executor

import (
	common "github.com/Layr-Labs/hourglass-monorepo/ponos/gen/protos/eigenlayer/hourglass/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TaskSubmission is the message used to submit a task to the executor from the aggregator
type TaskSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId             string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	AggregatorAddress  string `protobuf:"bytes,2,opt,name=aggregator_address,json=aggregatorAddress,proto3" json:"aggregator_address,omitempty"`
	AvsAddress         string `protobuf:"bytes,3,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
	Payload            []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature          []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	OperatorSetId      uint32 `protobuf:"varint,6,opt,name=operator_set_id,json=operatorSetId,proto3" json:"operator_set_id,omitempty"`
	ReferenceTimestamp uint32 `protobuf:"varint,7,opt,name=reference_timestamp,json=referenceTimestamp,proto3" json:"reference_timestamp,omitempty"`
}

func (x *TaskSubmission) Reset() {
	*x = TaskSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSubmission) ProtoMessage() {}

func (x *TaskSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSubmission.ProtoReflect.Descriptor instead.
func (*TaskSubmission) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{0}
}

func (x *TaskSubmission) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskSubmission) GetAggregatorAddress() string {
	if x != nil {
		return x.AggregatorAddress
	}
	return ""
}

func (x *TaskSubmission) GetAvsAddress() string {
	if x != nil {
		return x.AvsAddress
	}
	return ""
}

func (x *TaskSubmission) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TaskSubmission) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TaskSubmission) GetOperatorSetId() uint32 {
	if x != nil {
		return x.OperatorSetId
	}
	return 0
}

func (x *TaskSubmission) GetReferenceTimestamp() uint32 {
	if x != nil {
		return x.ReferenceTimestamp
	}
	return 0
}

type TaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId          string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	Output          []byte `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	Signature       []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	AvsAddress      string `protobuf:"bytes,5,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
	OperatorSetId   uint32 `protobuf:"varint,6,opt,name=operator_set_id,json=operatorSetId,proto3" json:"operator_set_id,omitempty"`
	OutputDigest    []byte `protobuf:"bytes,7,opt,name=output_digest,json=outputDigest,proto3" json:"output_digest,omitempty"`
}

func (x *TaskResult) Reset() {
	*x = TaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult) ProtoMessage() {}

func (x *TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult.ProtoReflect.Descriptor instead.
func (*TaskResult) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{1}
}

func (x *TaskResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResult) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *TaskResult) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TaskResult) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TaskResult) GetAvsAddress() string {
	if x != nil {
		return x.AvsAddress
	}
	return ""
}

func (x *TaskResult) GetOperatorSetId() uint32 {
	if x != nil {
		return x.OperatorSetId
	}
	return 0
}

func (x *TaskResult) GetOutputDigest() []byte {
	if x != nil {
		return x.OutputDigest
	}
	return nil
}

// KubernetesConfig contains Kubernetes-specific configuration for a performer
type KubernetesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceAccountName string `protobuf:"bytes,1,opt,name=service_account_name,json=serviceAccountName,proto3" json:"service_account_name,omitempty"`
}

func (x *KubernetesConfig) Reset() {
	*x = KubernetesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesConfig) ProtoMessage() {}

func (x *KubernetesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesConfig.ProtoReflect.Descriptor instead.
func (*KubernetesConfig) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{2}
}

func (x *KubernetesConfig) GetServiceAccountName() string {
	if x != nil {
		return x.ServiceAccountName
	}
	return ""
}

type PerformerImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registry string `protobuf:"bytes,1,opt,name=registry,proto3" json:"registry,omitempty"`
	Digest   string `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	Tag      string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *PerformerImage) Reset() {
	*x = PerformerImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformerImage) ProtoMessage() {}

func (x *PerformerImage) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformerImage.ProtoReflect.Descriptor instead.
func (*PerformerImage) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{3}
}

func (x *PerformerImage) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *PerformerImage) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *PerformerImage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// DeployArtifactRequest is the message used to deploy a new artifact to an AVS performer
type DeployArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image                *PerformerImage       `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	ProcessType          string                `protobuf:"bytes,2,opt,name=process_type,json=processType,proto3" json:"process_type,omitempty"`
	AvsAddress           string                `protobuf:"bytes,3,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
	Envs                 []*PerformerEnv       `protobuf:"bytes,4,rep,name=envs,proto3" json:"envs,omitempty"`
	PerformerNetworkName string                `protobuf:"bytes,5,opt,name=performer_network_name,json=performerNetworkName,proto3" json:"performer_network_name,omitempty"`
	Kubernetes           *KubernetesConfig     `protobuf:"bytes,6,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	Auth                 *common.AuthSignature `protobuf:"bytes,7,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *DeployArtifactRequest) Reset() {
	*x = DeployArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployArtifactRequest) ProtoMessage() {}

func (x *DeployArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployArtifactRequest.ProtoReflect.Descriptor instead.
func (*DeployArtifactRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{4}
}

func (x *DeployArtifactRequest) GetImage() *PerformerImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *DeployArtifactRequest) GetProcessType() string {
	if x != nil {
		return x.ProcessType
	}
	return ""
}

func (x *DeployArtifactRequest) GetAvsAddress() string {
	if x != nil {
		return x.AvsAddress
	}
	return ""
}

func (x *DeployArtifactRequest) GetEnvs() []*PerformerEnv {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *DeployArtifactRequest) GetPerformerNetworkName() string {
	if x != nil {
		return x.PerformerNetworkName
	}
	return ""
}

func (x *DeployArtifactRequest) GetKubernetes() *KubernetesConfig {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

func (x *DeployArtifactRequest) GetAuth() *common.AuthSignature {
	if x != nil {
		return x.Auth
	}
	return nil
}

type DeployArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message      string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	DeploymentId string `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *DeployArtifactResponse) Reset() {
	*x = DeployArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployArtifactResponse) ProtoMessage() {}

func (x *DeployArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployArtifactResponse.ProtoReflect.Descriptor instead.
func (*DeployArtifactResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{5}
}

func (x *DeployArtifactResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeployArtifactResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeployArtifactResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

// ListPerformersRequest is the message used to list all performers
type ListPerformersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: filter by AVS address
	AvsAddress string                `protobuf:"bytes,1,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
	Auth       *common.AuthSignature `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *ListPerformersRequest) Reset() {
	*x = ListPerformersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPerformersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPerformersRequest) ProtoMessage() {}

func (x *ListPerformersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPerformersRequest.ProtoReflect.Descriptor instead.
func (*ListPerformersRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{6}
}

func (x *ListPerformersRequest) GetAvsAddress() string {
	if x != nil {
		return x.AvsAddress
	}
	return ""
}

func (x *ListPerformersRequest) GetAuth() *common.AuthSignature {
	if x != nil {
		return x.Auth
	}
	return nil
}

type PerformerEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ValueFromEnv  string         `protobuf:"bytes,3,opt,name=value_from_env,json=valueFromEnv,proto3" json:"value_from_env,omitempty"`
	KubernetesEnv *KubernetesEnv `protobuf:"bytes,4,opt,name=kubernetes_env,json=kubernetesEnv,proto3" json:"kubernetes_env,omitempty"`
}

func (x *PerformerEnv) Reset() {
	*x = PerformerEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformerEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformerEnv) ProtoMessage() {}

func (x *PerformerEnv) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformerEnv.ProtoReflect.Descriptor instead.
func (*PerformerEnv) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{7}
}

func (x *PerformerEnv) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PerformerEnv) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PerformerEnv) GetValueFromEnv() string {
	if x != nil {
		return x.ValueFromEnv
	}
	return ""
}

func (x *PerformerEnv) GetKubernetesEnv() *KubernetesEnv {
	if x != nil {
		return x.KubernetesEnv
	}
	return nil
}

// KubernetesEnv represents a Kubernetes environment variable source
type KubernetesEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueFrom *EnvValueFrom `protobuf:"bytes,1,opt,name=value_from,json=valueFrom,proto3" json:"value_from,omitempty"`
}

func (x *KubernetesEnv) Reset() {
	*x = KubernetesEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesEnv) ProtoMessage() {}

func (x *KubernetesEnv) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesEnv.ProtoReflect.Descriptor instead.
func (*KubernetesEnv) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{8}
}

func (x *KubernetesEnv) GetValueFrom() *EnvValueFrom {
	if x != nil {
		return x.ValueFrom
	}
	return nil
}

// EnvValueFrom represents a source for the value of an environment variable
type EnvValueFrom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretKeyRef    *SecretKeyRef    `protobuf:"bytes,1,opt,name=secret_key_ref,json=secretKeyRef,proto3" json:"secret_key_ref,omitempty"`
	ConfigMapKeyRef *ConfigMapKeyRef `protobuf:"bytes,2,opt,name=config_map_key_ref,json=configMapKeyRef,proto3" json:"config_map_key_ref,omitempty"`
}

func (x *EnvValueFrom) Reset() {
	*x = EnvValueFrom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvValueFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvValueFrom) ProtoMessage() {}

func (x *EnvValueFrom) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvValueFrom.ProtoReflect.Descriptor instead.
func (*EnvValueFrom) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{9}
}

func (x *EnvValueFrom) GetSecretKeyRef() *SecretKeyRef {
	if x != nil {
		return x.SecretKeyRef
	}
	return nil
}

func (x *EnvValueFrom) GetConfigMapKeyRef() *ConfigMapKeyRef {
	if x != nil {
		return x.ConfigMapKeyRef
	}
	return nil
}

// SecretKeyRef selects a key of a secret in the pod's namespace
type SecretKeyRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretKeyRef) Reset() {
	*x = SecretKeyRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretKeyRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretKeyRef) ProtoMessage() {}

func (x *SecretKeyRef) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretKeyRef.ProtoReflect.Descriptor instead.
func (*SecretKeyRef) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{10}
}

func (x *SecretKeyRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecretKeyRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// ConfigMapKeyRef selects a key of a config map in the pod's namespace
type ConfigMapKeyRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ConfigMapKeyRef) Reset() {
	*x = ConfigMapKeyRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMapKeyRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapKeyRef) ProtoMessage() {}

func (x *ConfigMapKeyRef) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapKeyRef.ProtoReflect.Descriptor instead.
func (*ConfigMapKeyRef) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigMapKeyRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigMapKeyRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Performer contains information about a single performer
type Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerformerId        string `protobuf:"bytes,1,opt,name=performer_id,json=performerId,proto3" json:"performer_id,omitempty"`
	AvsAddress         string `protobuf:"bytes,2,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
	Status             string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ArtifactRegistry   string `protobuf:"bytes,4,opt,name=artifact_registry,json=artifactRegistry,proto3" json:"artifact_registry,omitempty"`
	ArtifactDigest     string `protobuf:"bytes,5,opt,name=artifact_digest,json=artifactDigest,proto3" json:"artifact_digest,omitempty"`
	ResourceHealthy    bool   `protobuf:"varint,6,opt,name=resource_healthy,json=resourceHealthy,proto3" json:"resource_healthy,omitempty"`
	ApplicationHealthy bool   `protobuf:"varint,7,opt,name=application_healthy,json=applicationHealthy,proto3" json:"application_healthy,omitempty"`
	LastHealthCheck    string `protobuf:"bytes,8,opt,name=last_health_check,json=lastHealthCheck,proto3" json:"last_health_check,omitempty"`
	ContainerId        string `protobuf:"bytes,9,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ArtifactTag        string `protobuf:"bytes,10,opt,name=artifact_tag,json=artifactTag,proto3" json:"artifact_tag,omitempty"`
}

func (x *Performer) Reset() {
	*x = Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Performer) ProtoMessage() {}

func (x *Performer) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Performer.ProtoReflect.Descriptor instead.
func (*Performer) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{12}
}

func (x *Performer) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

func (x *Performer) GetAvsAddress() string {
	if x != nil {
		return x.AvsAddress
	}
	return ""
}

func (x *Performer) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Performer) GetArtifactRegistry() string {
	if x != nil {
		return x.ArtifactRegistry
	}
	return ""
}

func (x *Performer) GetArtifactDigest() string {
	if x != nil {
		return x.ArtifactDigest
	}
	return ""
}

func (x *Performer) GetResourceHealthy() bool {
	if x != nil {
		return x.ResourceHealthy
	}
	return false
}

func (x *Performer) GetApplicationHealthy() bool {
	if x != nil {
		return x.ApplicationHealthy
	}
	return false
}

func (x *Performer) GetLastHealthCheck() string {
	if x != nil {
		return x.LastHealthCheck
	}
	return ""
}

func (x *Performer) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *Performer) GetArtifactTag() string {
	if x != nil {
		return x.ArtifactTag
	}
	return ""
}

// ListPerformersResponse contains the list of all performers
type ListPerformersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Performers []*Performer `protobuf:"bytes,1,rep,name=performers,proto3" json:"performers,omitempty"`
}

func (x *ListPerformersResponse) Reset() {
	*x = ListPerformersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPerformersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPerformersResponse) ProtoMessage() {}

func (x *ListPerformersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPerformersResponse.ProtoReflect.Descriptor instead.
func (*ListPerformersResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{13}
}

func (x *ListPerformersResponse) GetPerformers() []*Performer {
	if x != nil {
		return x.Performers
	}
	return nil
}

// RemovePerformerRequest is the message used to remove a performer
type RemovePerformerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerformerId string                `protobuf:"bytes,1,opt,name=performer_id,json=performerId,proto3" json:"performer_id,omitempty"`
	Auth        *common.AuthSignature `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *RemovePerformerRequest) Reset() {
	*x = RemovePerformerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePerformerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePerformerRequest) ProtoMessage() {}

func (x *RemovePerformerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePerformerRequest.ProtoReflect.Descriptor instead.
func (*RemovePerformerRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{14}
}

func (x *RemovePerformerRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

func (x *RemovePerformerRequest) GetAuth() *common.AuthSignature {
	if x != nil {
		return x.Auth
	}
	return nil
}

// RemovePerformerResponse contains the result of performer removal
type RemovePerformerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RemovePerformerResponse) Reset() {
	*x = RemovePerformerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePerformerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePerformerResponse) ProtoMessage() {}

func (x *RemovePerformerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePerformerResponse.ProtoReflect.Descriptor instead.
func (*RemovePerformerResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{15}
}

func (x *RemovePerformerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemovePerformerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// GetChallengeTokenRequest is used to request a challenge token for authentication
type GetChallengeTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (x *GetChallengeTokenRequest) Reset() {
	*x = GetChallengeTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengeTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeTokenRequest) ProtoMessage() {}

func (x *GetChallengeTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeTokenRequest.ProtoReflect.Descriptor instead.
func (*GetChallengeTokenRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{16}
}

func (x *GetChallengeTokenRequest) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

// GetChallengeTokenResponse returns a challenge token for authentication
type GetChallengeTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeToken string `protobuf:"bytes,1,opt,name=challenge_token,json=challengeToken,proto3" json:"challenge_token,omitempty"`
	ExpiresAt      int64  `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // Unix timestamp when token expires
}

func (x *GetChallengeTokenResponse) Reset() {
	*x = GetChallengeTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengeTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeTokenResponse) ProtoMessage() {}

func (x *GetChallengeTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeTokenResponse.ProtoReflect.Descriptor instead.
func (*GetChallengeTokenResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP(), []int{17}
}

func (x *GetChallengeTokenResponse) GetChallengeToken() string {
	if x != nil {
		return x.ChallengeToken
	}
	return ""
}

func (x *GetChallengeTokenResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

var File_eigenlayer_hourglass_v1_executor_executor_proto protoreflect.FileDescriptor

var file_eigenlayer_hourglass_v1_executor_executor_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x68, 0x6f, 0x75,
	0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f,
	0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x29, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xf4, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x76, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x10, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x56, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x99, 0x03, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f,
	0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x73, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72,
	0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x22, 0x71, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x41, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72,
	0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x45, 0x6e, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x76,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x45, 0x6e, 0x76, 0x12, 0x4d, 0x0a, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c,
	0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x76, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x76, 0x22, 0x55, 0x0a, 0x0d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x76, 0x12, 0x44, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x45,
	0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x4b, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x12, 0x55, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x22,
	0x34, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x37, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x8b,
	0x03, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x61, 0x67, 0x22, 0x5c, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x7e, 0x0a, 0x16, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x4d, 0x0a, 0x17, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x63, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x32, 0x6f, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x23, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75,
	0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x32, 0xfb, 0x03, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x65, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76,
	0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x2f, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68,
	0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x2e, 0x65, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72,
	0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x85, 0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x68, 0x6f, 0x75, 0x72,
	0x67, 0x6c, 0x61, 0x73, 0x73, 0x2d, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x70,
	0x6f, 0x6e, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x68, 0x6f, 0x75, 0x72, 0x67,
	0x6c, 0x61, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0xa2, 0x02, 0x03, 0x45, 0x48, 0x58, 0xaa, 0x02, 0x17, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x17, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x48, 0x6f,
	0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x23, 0x45, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x48, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73,
	0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x19, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x3a, 0x3a, 0x48,
	0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescOnce sync.Once
	file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescData = file_eigenlayer_hourglass_v1_executor_executor_proto_rawDesc
)

func file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescGZIP() []byte {
	file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescOnce.Do(func() {
		file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescData = protoimpl.X.CompressGZIP(file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescData)
	})
	return file_eigenlayer_hourglass_v1_executor_executor_proto_rawDescData
}

var file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_eigenlayer_hourglass_v1_executor_executor_proto_goTypes = []any{
	(*TaskSubmission)(nil),            // 0: eigenlayer.hourglass.v1.TaskSubmission
	(*TaskResult)(nil),                // 1: eigenlayer.hourglass.v1.TaskResult
	(*KubernetesConfig)(nil),          // 2: eigenlayer.hourglass.v1.KubernetesConfig
	(*PerformerImage)(nil),            // 3: eigenlayer.hourglass.v1.PerformerImage
	(*DeployArtifactRequest)(nil),     // 4: eigenlayer.hourglass.v1.DeployArtifactRequest
	(*DeployArtifactResponse)(nil),    // 5: eigenlayer.hourglass.v1.DeployArtifactResponse
	(*ListPerformersRequest)(nil),     // 6: eigenlayer.hourglass.v1.ListPerformersRequest
	(*PerformerEnv)(nil),              // 7: eigenlayer.hourglass.v1.PerformerEnv
	(*KubernetesEnv)(nil),             // 8: eigenlayer.hourglass.v1.KubernetesEnv
	(*EnvValueFrom)(nil),              // 9: eigenlayer.hourglass.v1.EnvValueFrom
	(*SecretKeyRef)(nil),              // 10: eigenlayer.hourglass.v1.SecretKeyRef
	(*ConfigMapKeyRef)(nil),           // 11: eigenlayer.hourglass.v1.ConfigMapKeyRef
	(*Performer)(nil),                 // 12: eigenlayer.hourglass.v1.Performer
	(*ListPerformersResponse)(nil),    // 13: eigenlayer.hourglass.v1.ListPerformersResponse
	(*RemovePerformerRequest)(nil),    // 14: eigenlayer.hourglass.v1.RemovePerformerRequest
	(*RemovePerformerResponse)(nil),   // 15: eigenlayer.hourglass.v1.RemovePerformerResponse
	(*GetChallengeTokenRequest)(nil),  // 16: eigenlayer.hourglass.v1.GetChallengeTokenRequest
	(*GetChallengeTokenResponse)(nil), // 17: eigenlayer.hourglass.v1.GetChallengeTokenResponse
	(*common.AuthSignature)(nil),      // 18: eigenlayer.hourglass.v1.common.AuthSignature
}
var file_eigenlayer_hourglass_v1_executor_executor_proto_depIdxs = []int32{
	3,  // 0: eigenlayer.hourglass.v1.DeployArtifactRequest.image:type_name -> eigenlayer.hourglass.v1.PerformerImage
	7,  // 1: eigenlayer.hourglass.v1.DeployArtifactRequest.envs:type_name -> eigenlayer.hourglass.v1.PerformerEnv
	2,  // 2: eigenlayer.hourglass.v1.DeployArtifactRequest.kubernetes:type_name -> eigenlayer.hourglass.v1.KubernetesConfig
	18, // 3: eigenlayer.hourglass.v1.DeployArtifactRequest.auth:type_name -> eigenlayer.hourglass.v1.common.AuthSignature
	18, // 4: eigenlayer.hourglass.v1.ListPerformersRequest.auth:type_name -> eigenlayer.hourglass.v1.common.AuthSignature
	8,  // 5: eigenlayer.hourglass.v1.PerformerEnv.kubernetes_env:type_name -> eigenlayer.hourglass.v1.KubernetesEnv
	9,  // 6: eigenlayer.hourglass.v1.KubernetesEnv.value_from:type_name -> eigenlayer.hourglass.v1.EnvValueFrom
	10, // 7: eigenlayer.hourglass.v1.EnvValueFrom.secret_key_ref:type_name -> eigenlayer.hourglass.v1.SecretKeyRef
	11, // 8: eigenlayer.hourglass.v1.EnvValueFrom.config_map_key_ref:type_name -> eigenlayer.hourglass.v1.ConfigMapKeyRef
	12, // 9: eigenlayer.hourglass.v1.ListPerformersResponse.performers:type_name -> eigenlayer.hourglass.v1.Performer
	18, // 10: eigenlayer.hourglass.v1.RemovePerformerRequest.auth:type_name -> eigenlayer.hourglass.v1.common.AuthSignature
	0,  // 11: eigenlayer.hourglass.v1.ExecutorService.SubmitTask:input_type -> eigenlayer.hourglass.v1.TaskSubmission
	4,  // 12: eigenlayer.hourglass.v1.ExecutorManagementService.DeployArtifact:input_type -> eigenlayer.hourglass.v1.DeployArtifactRequest
	6,  // 13: eigenlayer.hourglass.v1.ExecutorManagementService.ListPerformers:input_type -> eigenlayer.hourglass.v1.ListPerformersRequest
	14, // 14: eigenlayer.hourglass.v1.ExecutorManagementService.RemovePerformer:input_type -> eigenlayer.hourglass.v1.RemovePerformerRequest
	16, // 15: eigenlayer.hourglass.v1.ExecutorManagementService.GetChallengeToken:input_type -> eigenlayer.hourglass.v1.GetChallengeTokenRequest
	1,  // 16: eigenlayer.hourglass.v1.ExecutorService.SubmitTask:output_type -> eigenlayer.hourglass.v1.TaskResult
	5,  // 17: eigenlayer.hourglass.v1.ExecutorManagementService.DeployArtifact:output_type -> eigenlayer.hourglass.v1.DeployArtifactResponse
	13, // 18: eigenlayer.hourglass.v1.ExecutorManagementService.ListPerformers:output_type -> eigenlayer.hourglass.v1.ListPerformersResponse
	15, // 19: eigenlayer.hourglass.v1.ExecutorManagementService.RemovePerformer:output_type -> eigenlayer.hourglass.v1.RemovePerformerResponse
	17, // 20: eigenlayer.hourglass.v1.ExecutorManagementService.GetChallengeToken:output_type -> eigenlayer.hourglass.v1.GetChallengeTokenResponse
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_eigenlayer_hourglass_v1_executor_executor_proto_init() }
func file_eigenlayer_hourglass_v1_executor_executor_proto_init() {
	if File_eigenlayer_hourglass_v1_executor_executor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TaskSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PerformerImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeployArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeployArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListPerformersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PerformerEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*EnvValueFrom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SecretKeyRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigMapKeyRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ListPerformersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*RemovePerformerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RemovePerformerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetChallengeTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetChallengeTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eigenlayer_hourglass_v1_executor_executor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_eigenlayer_hourglass_v1_executor_executor_proto_goTypes,
		DependencyIndexes: file_eigenlayer_hourglass_v1_executor_executor_proto_depIdxs,
		MessageInfos:      file_eigenlayer_hourglass_v1_executor_executor_proto_msgTypes,
	}.Build()
	File_eigenlayer_hourglass_v1_executor_executor_proto = out.File
	file_eigenlayer_hourglass_v1_executor_executor_proto_rawDesc = nil
	file_eigenlayer_hourglass_v1_executor_executor_proto_goTypes = nil
	file_eigenlayer_hourglass_v1_executor_executor_proto_depIdxs = nil
}
