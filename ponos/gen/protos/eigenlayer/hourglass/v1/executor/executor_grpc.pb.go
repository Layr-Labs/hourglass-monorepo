// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eigenlayer/hourglass/v1/executor/executor.proto

package executor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExecutorService_Handshake_FullMethodName  = "/eigenlayer.hourglass.v1.executor.ExecutorService/Handshake"
	ExecutorService_WorkStream_FullMethodName = "/eigenlayer.hourglass.v1.executor.ExecutorService/WorkStream"
)

// ExecutorServiceClient is the client API for ExecutorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC service
type ExecutorServiceClient interface {
	Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error)
	WorkStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WorkStreamRequest, WorkStreamResponse], error)
}

type executorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorServiceClient(cc grpc.ClientConnInterface) ExecutorServiceClient {
	return &executorServiceClient{cc}
}

func (c *executorServiceClient) Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandshakeResponse)
	err := c.cc.Invoke(ctx, ExecutorService_Handshake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorServiceClient) WorkStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WorkStreamRequest, WorkStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExecutorService_ServiceDesc.Streams[0], ExecutorService_WorkStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkStreamRequest, WorkStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExecutorService_WorkStreamClient = grpc.BidiStreamingClient[WorkStreamRequest, WorkStreamResponse]

// ExecutorServiceServer is the server API for ExecutorService service.
// All implementations should embed UnimplementedExecutorServiceServer
// for forward compatibility.
//
// gRPC service
type ExecutorServiceServer interface {
	Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error)
	WorkStream(grpc.BidiStreamingServer[WorkStreamRequest, WorkStreamResponse]) error
}

// UnimplementedExecutorServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExecutorServiceServer struct{}

func (UnimplementedExecutorServiceServer) Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedExecutorServiceServer) WorkStream(grpc.BidiStreamingServer[WorkStreamRequest, WorkStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WorkStream not implemented")
}
func (UnimplementedExecutorServiceServer) testEmbeddedByValue() {}

// UnsafeExecutorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutorServiceServer will
// result in compilation errors.
type UnsafeExecutorServiceServer interface {
	mustEmbedUnimplementedExecutorServiceServer()
}

func RegisterExecutorServiceServer(s grpc.ServiceRegistrar, srv ExecutorServiceServer) {
	// If the following call pancis, it indicates UnimplementedExecutorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExecutorService_ServiceDesc, srv)
}

func _ExecutorService_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_Handshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).Handshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorService_WorkStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorServiceServer).WorkStream(&grpc.GenericServerStream[WorkStreamRequest, WorkStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExecutorService_WorkStreamServer = grpc.BidiStreamingServer[WorkStreamRequest, WorkStreamResponse]

// ExecutorService_ServiceDesc is the grpc.ServiceDesc for ExecutorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eigenlayer.hourglass.v1.executor.ExecutorService",
	HandlerType: (*ExecutorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _ExecutorService_Handshake_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WorkStream",
			Handler:       _ExecutorService_WorkStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "eigenlayer/hourglass/v1/executor/executor.proto",
}
