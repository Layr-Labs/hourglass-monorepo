package avsContainerPerformer

import (
	"context"
	"math/big"
	"testing"

	"github.com/Layr-Labs/crypto-libs/pkg/bn254"
	"github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/config"
	"github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/contractCaller"
	"github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/executor/avsPerformer"
	"github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/peering"
	"github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/performerTask"
	"github.com/Layr-Labs/hourglass-monorepo/ponos/pkg/signing/aggregation"
	"github.com/ethereum/go-ethereum/common"
	ethereumTypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/stretchr/testify/assert"
	"go.uber.org/zap"
)

// TestTaskSignatureValidationRejectsTamperedTasks tests that the signature validation
// correctly rejects tasks with tampered critical fields
func TestTaskSignatureValidationRejectsTamperedTasks(t *testing.T) {
	// Create a legitimate task with signature over payload only
	legitimateTask := createLegitimateTask(t)

	// Tamper with critical fields that should be protected
	tamperedTask := legitimateTask
	tamperedTask.TaskID = "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
	tamperedTask.Avs = "0xMaliciousAVS123456789012345678901234567890123456"
	tamperedTask.OperatorSetId = 999
	tamperedTask.AggregatorAddress = "0xMaliciousAggregator123456789012345678901234567890123456"

	// Create a mock performer with the necessary setup
	performer := createMockPerformer(t)

	// This should PASS (no error) because the task is correctly rejected
	err := performer.ValidateTaskSignature(tamperedTask)

	// This assertion should pass (security validation is working)
	assert.Error(t, err, "Should reject tampered task")
}

// Helper function to create a legitimate task with valid signature
func createLegitimateTask(t *testing.T) *performerTask.PerformerTask {
	// Create a legitimate payload
	payload := []byte("legitimate task payload")

	// Create a legitimate task
	task := &performerTask.PerformerTask{
		TaskID:             "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
		Avs:                "0xLegitimateAVS123456789012345678901234567890123456",
		Payload:            payload,
		Signature:          []byte("fake_signature_for_testing"), // Mock signature for testing
		AggregatorAddress:  "0xLegitimateAggregator123456789012345678901234567890123456",
		OperatorSetId:      1,
		ReferenceTimestamp: 1234567890,
	}

	return task
}

// Helper function to create a mock performer for testing
func createMockPerformer(t *testing.T) *AvsContainerPerformer {
	// Create mock operator sets
	operatorSets := []*peering.OperatorSet{
		{
			OperatorSetID: 1,
			CurveType:     config.CurveTypeBN254,
			WrappedPublicKey: peering.WrappedPublicKey{
				PublicKey: nil, // Mock public key - will be nil for testing
			},
		},
	}

	// Create mock aggregator peer
	aggregatorPeer := &peering.OperatorPeerInfo{
		OperatorAddress: "0xLegitimateAggregator123456789012345678901234567890123456",
		OperatorSets:    operatorSets,
	}

	// Create mock performer with all required fields
	performer := &AvsContainerPerformer{
		config: &avsPerformer.AvsPerformerConfig{
			AvsAddress:      "0xLegitimateAVS123456789012345678901234567890123456",
			OperatorAddress: "0xLegitimateAggregator123456789012345678901234567890123456",
		},
		logger:           zap.NewNop(), // Use no-op logger to avoid nil pointer
		aggregatorPeers:  []*peering.OperatorPeerInfo{aggregatorPeer},
		l1ContractCaller: &mockContractCaller{}, // Mock contract caller
	}

	return performer
}

// Mock contract caller to avoid nil pointer dereferences
type mockContractCaller struct{}

func (m *mockContractCaller) GetAVSConfig(avsAddress string) (*contractCaller.AVSConfig, error) {
	return &contractCaller.AVSConfig{
		AggregatorOperatorSetId: 1,
	}, nil
}

func (m *mockContractCaller) GetOperatorSetDetailsForOperator(aggregatorAddress common.Address, avsAddress string, operatorSetId uint32) (*peering.OperatorSet, error) {
	return &peering.OperatorSet{
		OperatorSetID: 1,
		CurveType:     config.CurveTypeBN254,
		WrappedPublicKey: peering.WrappedPublicKey{
			PublicKey: nil, // Mock public key
		},
	}, nil
}

// Implement the missing interface methods with empty implementations
func (m *mockContractCaller) SubmitBN254TaskResult(ctx context.Context, aggCert *aggregation.AggregatedBN254Certificate, globalTableRootReferenceTimestamp uint32) (*ethereumTypes.Receipt, error) {
	return nil, nil
}

func (m *mockContractCaller) SubmitBN254TaskResultRetryable(ctx context.Context, aggCert *aggregation.AggregatedBN254Certificate, globalTableRootReferenceTimestamp uint32) (*ethereumTypes.Receipt, error) {
	return nil, nil
}

func (m *mockContractCaller) SubmitECDSATaskResult(ctx context.Context, aggCert *aggregation.AggregatedECDSACertificate, globalTableRootReferenceTimestamp uint32) (*ethereumTypes.Receipt, error) {
	return nil, nil
}

func (m *mockContractCaller) SubmitECDSATaskResultRetryable(ctx context.Context, aggCert *aggregation.AggregatedECDSACertificate, globalTableRootReferenceTimestamp uint32) (*ethereumTypes.Receipt, error) {
	return nil, nil
}

func (m *mockContractCaller) GetOperatorSetCurveType(avsAddress string, operatorSetId uint32) (config.CurveType, error) {
	return config.CurveTypeBN254, nil
}

func (m *mockContractCaller) GetOperatorSetMembersWithPeering(avsAddress string, operatorSetId uint32) ([]*peering.OperatorPeerInfo, error) {
	return nil, nil
}

func (m *mockContractCaller) PublishMessageToInbox(ctx context.Context, avsAddress string, operatorSetId uint32, payload []byte) (*ethereumTypes.Receipt, error) {
	return nil, nil
}

func (m *mockContractCaller) GetOperatorTableDataForOperatorSet(ctx context.Context, avsAddress common.Address, operatorSetId uint32, chainId config.ChainId, referenceBlocknumber uint64) (*contractCaller.OperatorTableData, error) {
	return nil, nil
}

func (m *mockContractCaller) GetTableUpdaterReferenceTimeAndBlock(ctx context.Context, tableUpdaterAddr common.Address, atBlockNumber uint64) (*contractCaller.LatestReferenceTimeAndBlock, error) {
	return nil, nil
}

func (m *mockContractCaller) CalculateBN254CertificateDigestBytes(ctx context.Context, referenceTimestamp uint32, messageHash [32]byte) ([]byte, error) {
	return nil, nil
}

func (m *mockContractCaller) CalculateECDSACertificateDigestBytes(ctx context.Context, referenceTimestamp uint32, messageHash [32]byte) ([]byte, error) {
	return nil, nil
}

func (m *mockContractCaller) GetSupportedChainsForMultichain(ctx context.Context, referenceBlockNumber int64) ([]*big.Int, []common.Address, error) {
	return nil, nil, nil
}

func (m *mockContractCaller) GetExecutorOperatorSetTaskConfig(ctx context.Context, avsAddress common.Address, opsetId uint32) (*contractCaller.TaskMailboxExecutorOperatorSetConfig, error) {
	return nil, nil
}

func (m *mockContractCaller) GetOperatorBN254KeyRegistrationMessageHash(ctx context.Context, operatorAddress common.Address, avsAddress common.Address, operatorSetId uint32, keyData []byte) ([32]byte, error) {
	return [32]byte{}, nil
}

func (m *mockContractCaller) GetOperatorECDSAKeyRegistrationMessageHash(ctx context.Context, operatorAddress common.Address, avsAddress common.Address, operatorSetId uint32, signingKeyAddress common.Address) ([32]byte, error) {
	return [32]byte{}, nil
}

func (m *mockContractCaller) ConfigureAVSOperatorSet(ctx context.Context, avsAddress common.Address, operatorSetId uint32, curveType config.CurveType) (*ethereumTypes.Receipt, error) {
	return nil, nil
}

func (m *mockContractCaller) RegisterKeyWithKeyRegistrar(ctx context.Context, operatorAddress common.Address, avsAddress common.Address, operatorSetId uint32, sigBytes []byte, keyData []byte) (*ethereumTypes.Receipt, error) {
	return nil, nil
}

func (m *mockContractCaller) CreateOperatorAndRegisterWithAvs(ctx context.Context, avsAddress common.Address, operatorAddress common.Address, operatorSetIds []uint32, socket string, allocationDelay uint32, metadataUri string) (*ethereumTypes.Receipt, error) {
	return nil, nil
}

func (m *mockContractCaller) EncodeBN254KeyData(pubKey *bn254.PublicKey) ([]byte, error) {
	return nil, nil
}

func (m *mockContractCaller) SetupTaskMailboxForAvs(ctx context.Context, avsAddress common.Address, taskHookAddress common.Address, executorOperatorSetIds []uint32, curveTypes []config.CurveType) error {
	return nil
}
